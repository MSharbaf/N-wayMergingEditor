/*
 * generated by Xtext 2.14.0
 */
package org.xtext.example.nml.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.ocl.xtext.base.services.BaseGrammarAccess;
import org.eclipse.ocl.xtext.essentialocl.services.EssentialOCLGrammarAccess;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class NMLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class TopLevelCPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.nml.NML.TopLevelCP");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOwnedDomainsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOwnedDomainsDomainCPParserRuleCall_3_0 = (RuleCall)cOwnedDomainsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cPreKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cUnrestrictedNameParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cOwnedPreAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cOwnedPreStatementCSParserRuleCall_4_3_0 = (RuleCall)cOwnedPreAssignment_4_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cRuleKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cUnrestrictedNameParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Assignment cOwnedOctopusAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cOwnedOctopusOctopusCPParserRuleCall_5_2_0 = (RuleCall)cOwnedOctopusAssignment_5_2.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cRuleKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final RuleCall cUnrestrictedNameParserRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final Assignment cOwnedOursAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cOwnedOursOursCPParserRuleCall_6_2_0 = (RuleCall)cOwnedOursAssignment_6_2.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cRuleKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final RuleCall cUnrestrictedNameParserRuleCall_7_1 = (RuleCall)cGroup_7.eContents().get(1);
		private final Assignment cOwnedTransformationAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cOwnedTransformationTransformationCPParserRuleCall_7_2_0 = (RuleCall)cOwnedTransformationAssignment_7_2.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cPostKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final RuleCall cUnrestrictedNameParserRuleCall_8_1 = (RuleCall)cGroup_8.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Assignment cOwnedPreAssignment_8_3 = (Assignment)cGroup_8.eContents().get(3);
		private final RuleCall cOwnedPreStatementCSParserRuleCall_8_3_0 = (RuleCall)cOwnedPreAssignment_8_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_4 = (Keyword)cGroup_8.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//TopLevelCP:
		//	'module' name=Identifier '{'
		//	//		(ownedImports+=ImportCP)*
		//	ownedDomains+=DomainCP+ ('pre' UnrestrictedName? '{' ownedPre+=StatementCS* '}')? ('rule' UnrestrictedName
		//	ownedOctopus+=OctopusCP)* ('rule' UnrestrictedName ownedOurs+=OursCP)* ('rule' UnrestrictedName
		//	ownedTransformation+=TransformationCP)* ('post' UnrestrictedName? '{' ownedPre+=StatementCS* '}')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'module' name=Identifier '{' //		(ownedImports+=ImportCP)*
		//ownedDomains+=DomainCP+ ('pre' UnrestrictedName? '{' ownedPre+=StatementCS* '}')? ('rule' UnrestrictedName
		//ownedOctopus+=OctopusCP)* ('rule' UnrestrictedName ownedOurs+=OursCP)* ('rule' UnrestrictedName
		//ownedTransformation+=TransformationCP)* ('post' UnrestrictedName? '{' ownedPre+=StatementCS* '}')? '}'
		public Group getGroup() { return cGroup; }
		
		//'module'
		public Keyword getModuleKeyword_0() { return cModuleKeyword_0; }
		
		//name=Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		////		(ownedImports+=ImportCP)*
		//ownedDomains+=DomainCP+
		public Assignment getOwnedDomainsAssignment_3() { return cOwnedDomainsAssignment_3; }
		
		//DomainCP
		public RuleCall getOwnedDomainsDomainCPParserRuleCall_3_0() { return cOwnedDomainsDomainCPParserRuleCall_3_0; }
		
		//('pre' UnrestrictedName? '{' ownedPre+=StatementCS* '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'pre'
		public Keyword getPreKeyword_4_0() { return cPreKeyword_4_0; }
		
		//UnrestrictedName?
		public RuleCall getUnrestrictedNameParserRuleCall_4_1() { return cUnrestrictedNameParserRuleCall_4_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_2() { return cLeftCurlyBracketKeyword_4_2; }
		
		//ownedPre+=StatementCS*
		public Assignment getOwnedPreAssignment_4_3() { return cOwnedPreAssignment_4_3; }
		
		//StatementCS
		public RuleCall getOwnedPreStatementCSParserRuleCall_4_3_0() { return cOwnedPreStatementCSParserRuleCall_4_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//('rule' UnrestrictedName ownedOctopus+=OctopusCP)*
		public Group getGroup_5() { return cGroup_5; }
		
		//'rule'
		public Keyword getRuleKeyword_5_0() { return cRuleKeyword_5_0; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameParserRuleCall_5_1() { return cUnrestrictedNameParserRuleCall_5_1; }
		
		//ownedOctopus+=OctopusCP
		public Assignment getOwnedOctopusAssignment_5_2() { return cOwnedOctopusAssignment_5_2; }
		
		//OctopusCP
		public RuleCall getOwnedOctopusOctopusCPParserRuleCall_5_2_0() { return cOwnedOctopusOctopusCPParserRuleCall_5_2_0; }
		
		//('rule' UnrestrictedName ownedOurs+=OursCP)*
		public Group getGroup_6() { return cGroup_6; }
		
		//'rule'
		public Keyword getRuleKeyword_6_0() { return cRuleKeyword_6_0; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameParserRuleCall_6_1() { return cUnrestrictedNameParserRuleCall_6_1; }
		
		//ownedOurs+=OursCP
		public Assignment getOwnedOursAssignment_6_2() { return cOwnedOursAssignment_6_2; }
		
		//OursCP
		public RuleCall getOwnedOursOursCPParserRuleCall_6_2_0() { return cOwnedOursOursCPParserRuleCall_6_2_0; }
		
		//('rule' UnrestrictedName ownedTransformation+=TransformationCP)*
		public Group getGroup_7() { return cGroup_7; }
		
		//'rule'
		public Keyword getRuleKeyword_7_0() { return cRuleKeyword_7_0; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameParserRuleCall_7_1() { return cUnrestrictedNameParserRuleCall_7_1; }
		
		//ownedTransformation+=TransformationCP
		public Assignment getOwnedTransformationAssignment_7_2() { return cOwnedTransformationAssignment_7_2; }
		
		//TransformationCP
		public RuleCall getOwnedTransformationTransformationCPParserRuleCall_7_2_0() { return cOwnedTransformationTransformationCPParserRuleCall_7_2_0; }
		
		//('post' UnrestrictedName? '{' ownedPre+=StatementCS* '}')?
		public Group getGroup_8() { return cGroup_8; }
		
		//'post'
		public Keyword getPostKeyword_8_0() { return cPostKeyword_8_0; }
		
		//UnrestrictedName?
		public RuleCall getUnrestrictedNameParserRuleCall_8_1() { return cUnrestrictedNameParserRuleCall_8_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8_2() { return cLeftCurlyBracketKeyword_8_2; }
		
		//ownedPre+=StatementCS*
		public Assignment getOwnedPreAssignment_8_3() { return cOwnedPreAssignment_8_3; }
		
		//StatementCS
		public RuleCall getOwnedPreStatementCSParserRuleCall_8_3_0() { return cOwnedPreStatementCSParserRuleCall_8_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8_4() { return cRightCurlyBracketKeyword_8_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class DomainCPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.nml.NML.DomainCP");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIDParserRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNsURIAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNsURIURIParserRuleCall_2_0 = (RuleCall)cNsURIAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////ImportCP returns base::ImportCS:
		////	('import' | 'domain') (name=Identifier ':')? ownedPathName=URIPathNameCS (isAll?='::*')?  
		////;
		//DomainCP:
		//	'import' (name=ID ':')? nsURI=URI ';'
		//	/*nsURI=URI /*ownedPathName=PathNameCS /* ownedPathName=Base::URI ownedPathElements+=URIFirstPathElementCS  =URIPathNameCS /*(isAll?='::*')?*/;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' (name=ID ':')? nsURI=URI ';'
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//(name=ID ':')?
		public Group getGroup_1() { return cGroup_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//ID
		public RuleCall getNameIDParserRuleCall_1_0_0() { return cNameIDParserRuleCall_1_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//nsURI=URI
		public Assignment getNsURIAssignment_2() { return cNsURIAssignment_2; }
		
		//URI
		public RuleCall getNsURIURIParserRuleCall_2_0() { return cNsURIURIParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class OctopusCPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.nml.NML.OctopusCP");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMergeOctopusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOwnedModelsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedModelsModelTypeCSParserRuleCall_1_0 = (RuleCall)cOwnedModelsAssignment_1.eContents().get(0);
		private final Keyword cWithKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOwnedModelsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOwnedModelsModelTypeCSParserRuleCall_3_0 = (RuleCall)cOwnedModelsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOwnedModelsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOwnedModelsModelTypeCSParserRuleCall_4_1_0 = (RuleCall)cOwnedModelsAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cWithBaseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cOwnedModelsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cOwnedModelsModelTypeCSParserRuleCall_5_1_0 = (RuleCall)cOwnedModelsAssignment_5_1.eContents().get(0);
		private final Keyword cIntoKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cOwnedModelsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cOwnedModelsModelTypeCSParserRuleCall_7_0 = (RuleCall)cOwnedModelsAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cExtendsKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final RuleCall cUnrestrictedNameParserRuleCall_8_1 = (RuleCall)cGroup_8.eContents().get(1);
		private final Group cGroup_8_2 = (Group)cGroup_8.eContents().get(2);
		private final Keyword cCommaKeyword_8_2_0 = (Keyword)cGroup_8_2.eContents().get(0);
		private final RuleCall cUnrestrictedNameParserRuleCall_8_2_1 = (RuleCall)cGroup_8_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cOwnedConditionsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cOwnedConditionsStatementCSParserRuleCall_10_0 = (RuleCall)cOwnedConditionsAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//OctopusCP:
		//	'mergeOctopus' ownedModels+=modelTypeCS
		//	'with' ownedModels+=modelTypeCS (',' ownedModels+=modelTypeCS)* ('withBase' ownedModels+=modelTypeCS)?
		//	'into' ownedModels+=modelTypeCS ('extends' UnrestrictedName (',' UnrestrictedName)*)?
		//	'{'
		//	ownedConditions+=StatementCS+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'mergeOctopus' ownedModels+=modelTypeCS 'with' ownedModels+=modelTypeCS (',' ownedModels+=modelTypeCS)* ('withBase'
		//ownedModels+=modelTypeCS)? 'into' ownedModels+=modelTypeCS ('extends' UnrestrictedName (',' UnrestrictedName)*)? '{'
		//ownedConditions+=StatementCS+ '}'
		public Group getGroup() { return cGroup; }
		
		//'mergeOctopus'
		public Keyword getMergeOctopusKeyword_0() { return cMergeOctopusKeyword_0; }
		
		//ownedModels+=modelTypeCS
		public Assignment getOwnedModelsAssignment_1() { return cOwnedModelsAssignment_1; }
		
		//modelTypeCS
		public RuleCall getOwnedModelsModelTypeCSParserRuleCall_1_0() { return cOwnedModelsModelTypeCSParserRuleCall_1_0; }
		
		//'with'
		public Keyword getWithKeyword_2() { return cWithKeyword_2; }
		
		//ownedModels+=modelTypeCS
		public Assignment getOwnedModelsAssignment_3() { return cOwnedModelsAssignment_3; }
		
		//modelTypeCS
		public RuleCall getOwnedModelsModelTypeCSParserRuleCall_3_0() { return cOwnedModelsModelTypeCSParserRuleCall_3_0; }
		
		//(',' ownedModels+=modelTypeCS)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//ownedModels+=modelTypeCS
		public Assignment getOwnedModelsAssignment_4_1() { return cOwnedModelsAssignment_4_1; }
		
		//modelTypeCS
		public RuleCall getOwnedModelsModelTypeCSParserRuleCall_4_1_0() { return cOwnedModelsModelTypeCSParserRuleCall_4_1_0; }
		
		//('withBase' ownedModels+=modelTypeCS)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'withBase'
		public Keyword getWithBaseKeyword_5_0() { return cWithBaseKeyword_5_0; }
		
		//ownedModels+=modelTypeCS
		public Assignment getOwnedModelsAssignment_5_1() { return cOwnedModelsAssignment_5_1; }
		
		//modelTypeCS
		public RuleCall getOwnedModelsModelTypeCSParserRuleCall_5_1_0() { return cOwnedModelsModelTypeCSParserRuleCall_5_1_0; }
		
		//'into'
		public Keyword getIntoKeyword_6() { return cIntoKeyword_6; }
		
		//ownedModels+=modelTypeCS
		public Assignment getOwnedModelsAssignment_7() { return cOwnedModelsAssignment_7; }
		
		//modelTypeCS
		public RuleCall getOwnedModelsModelTypeCSParserRuleCall_7_0() { return cOwnedModelsModelTypeCSParserRuleCall_7_0; }
		
		//('extends' UnrestrictedName (',' UnrestrictedName)*)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'extends'
		public Keyword getExtendsKeyword_8_0() { return cExtendsKeyword_8_0; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameParserRuleCall_8_1() { return cUnrestrictedNameParserRuleCall_8_1; }
		
		//(',' UnrestrictedName)*
		public Group getGroup_8_2() { return cGroup_8_2; }
		
		//','
		public Keyword getCommaKeyword_8_2_0() { return cCommaKeyword_8_2_0; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameParserRuleCall_8_2_1() { return cUnrestrictedNameParserRuleCall_8_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_9() { return cLeftCurlyBracketKeyword_9; }
		
		//ownedConditions+=StatementCS+
		public Assignment getOwnedConditionsAssignment_10() { return cOwnedConditionsAssignment_10; }
		
		//StatementCS
		public RuleCall getOwnedConditionsStatementCSParserRuleCall_10_0() { return cOwnedConditionsStatementCSParserRuleCall_10_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class OursCPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.nml.NML.OursCP");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMergeOursKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOwnedModelsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedModelsModelTypeCSParserRuleCall_1_0 = (RuleCall)cOwnedModelsAssignment_1.eContents().get(0);
		private final Keyword cWithKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOwnedModelsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOwnedModelsModelTypeCSParserRuleCall_3_0 = (RuleCall)cOwnedModelsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOwnedModelsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOwnedModelsModelTypeCSParserRuleCall_4_1_0 = (RuleCall)cOwnedModelsAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cWithBaseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cOwnedModelsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cOwnedModelsModelTypeCSParserRuleCall_5_1_0 = (RuleCall)cOwnedModelsAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cExists_inKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_5_2_1 = (RuleCall)cGroup_5_2.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cPriorityKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cOwnedOrdersAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cOwnedOrdersModelOrderCSParserRuleCall_6_1_0 = (RuleCall)cOwnedOrdersAssignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cCommaKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cOwnedOrdersAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cOwnedOrdersModelOrderCSParserRuleCall_6_2_1_0 = (RuleCall)cOwnedOrdersAssignment_6_2_1.eContents().get(0);
		private final Keyword cIntoKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cOwnedModelsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cOwnedModelsModelTypeCSParserRuleCall_8_0 = (RuleCall)cOwnedModelsAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cExtendsKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final RuleCall cUnrestrictedNameParserRuleCall_9_1 = (RuleCall)cGroup_9.eContents().get(1);
		private final Group cGroup_9_2 = (Group)cGroup_9.eContents().get(2);
		private final Keyword cCommaKeyword_9_2_0 = (Keyword)cGroup_9_2.eContents().get(0);
		private final RuleCall cUnrestrictedNameParserRuleCall_9_2_1 = (RuleCall)cGroup_9_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cOwnedStatementAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cOwnedStatementStatementCSParserRuleCall_11_0 = (RuleCall)cOwnedStatementAssignment_11.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//OursCP:
		//	'mergeOurs' ownedModels+=modelTypeCS
		//	'with' ownedModels+=modelTypeCS (',' ownedModels+=modelTypeCS)* ('withBase' ownedModels+=modelTypeCS ('exists_in'
		//	INT)?)? ('priority' ownedOrders+=modelOrderCS (',' ownedOrders+=modelOrderCS)*)?
		//	'into' ownedModels+=modelTypeCS ('extends' UnrestrictedName (',' UnrestrictedName)*)?
		//	'{'
		//	ownedStatement+=StatementCS+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'mergeOurs' ownedModels+=modelTypeCS 'with' ownedModels+=modelTypeCS (',' ownedModels+=modelTypeCS)* ('withBase'
		//ownedModels+=modelTypeCS ('exists_in' INT)?)? ('priority' ownedOrders+=modelOrderCS (',' ownedOrders+=modelOrderCS)*)?
		//'into' ownedModels+=modelTypeCS ('extends' UnrestrictedName (',' UnrestrictedName)*)? '{' ownedStatement+=StatementCS+
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'mergeOurs'
		public Keyword getMergeOursKeyword_0() { return cMergeOursKeyword_0; }
		
		//ownedModels+=modelTypeCS
		public Assignment getOwnedModelsAssignment_1() { return cOwnedModelsAssignment_1; }
		
		//modelTypeCS
		public RuleCall getOwnedModelsModelTypeCSParserRuleCall_1_0() { return cOwnedModelsModelTypeCSParserRuleCall_1_0; }
		
		//'with'
		public Keyword getWithKeyword_2() { return cWithKeyword_2; }
		
		//ownedModels+=modelTypeCS
		public Assignment getOwnedModelsAssignment_3() { return cOwnedModelsAssignment_3; }
		
		//modelTypeCS
		public RuleCall getOwnedModelsModelTypeCSParserRuleCall_3_0() { return cOwnedModelsModelTypeCSParserRuleCall_3_0; }
		
		//(',' ownedModels+=modelTypeCS)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//ownedModels+=modelTypeCS
		public Assignment getOwnedModelsAssignment_4_1() { return cOwnedModelsAssignment_4_1; }
		
		//modelTypeCS
		public RuleCall getOwnedModelsModelTypeCSParserRuleCall_4_1_0() { return cOwnedModelsModelTypeCSParserRuleCall_4_1_0; }
		
		//('withBase' ownedModels+=modelTypeCS ('exists_in' INT)?)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'withBase'
		public Keyword getWithBaseKeyword_5_0() { return cWithBaseKeyword_5_0; }
		
		//ownedModels+=modelTypeCS
		public Assignment getOwnedModelsAssignment_5_1() { return cOwnedModelsAssignment_5_1; }
		
		//modelTypeCS
		public RuleCall getOwnedModelsModelTypeCSParserRuleCall_5_1_0() { return cOwnedModelsModelTypeCSParserRuleCall_5_1_0; }
		
		//('exists_in' INT)?
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//'exists_in'
		public Keyword getExists_inKeyword_5_2_0() { return cExists_inKeyword_5_2_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_5_2_1() { return cINTTerminalRuleCall_5_2_1; }
		
		//('priority' ownedOrders+=modelOrderCS (',' ownedOrders+=modelOrderCS)*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'priority'
		public Keyword getPriorityKeyword_6_0() { return cPriorityKeyword_6_0; }
		
		//ownedOrders+=modelOrderCS
		public Assignment getOwnedOrdersAssignment_6_1() { return cOwnedOrdersAssignment_6_1; }
		
		//modelOrderCS
		public RuleCall getOwnedOrdersModelOrderCSParserRuleCall_6_1_0() { return cOwnedOrdersModelOrderCSParserRuleCall_6_1_0; }
		
		//(',' ownedOrders+=modelOrderCS)*
		public Group getGroup_6_2() { return cGroup_6_2; }
		
		//','
		public Keyword getCommaKeyword_6_2_0() { return cCommaKeyword_6_2_0; }
		
		//ownedOrders+=modelOrderCS
		public Assignment getOwnedOrdersAssignment_6_2_1() { return cOwnedOrdersAssignment_6_2_1; }
		
		//modelOrderCS
		public RuleCall getOwnedOrdersModelOrderCSParserRuleCall_6_2_1_0() { return cOwnedOrdersModelOrderCSParserRuleCall_6_2_1_0; }
		
		//'into'
		public Keyword getIntoKeyword_7() { return cIntoKeyword_7; }
		
		//ownedModels+=modelTypeCS
		public Assignment getOwnedModelsAssignment_8() { return cOwnedModelsAssignment_8; }
		
		//modelTypeCS
		public RuleCall getOwnedModelsModelTypeCSParserRuleCall_8_0() { return cOwnedModelsModelTypeCSParserRuleCall_8_0; }
		
		//('extends' UnrestrictedName (',' UnrestrictedName)*)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'extends'
		public Keyword getExtendsKeyword_9_0() { return cExtendsKeyword_9_0; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameParserRuleCall_9_1() { return cUnrestrictedNameParserRuleCall_9_1; }
		
		//(',' UnrestrictedName)*
		public Group getGroup_9_2() { return cGroup_9_2; }
		
		//','
		public Keyword getCommaKeyword_9_2_0() { return cCommaKeyword_9_2_0; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameParserRuleCall_9_2_1() { return cUnrestrictedNameParserRuleCall_9_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_10() { return cLeftCurlyBracketKeyword_10; }
		
		//ownedStatement+=StatementCS+
		public Assignment getOwnedStatementAssignment_11() { return cOwnedStatementAssignment_11; }
		
		//StatementCS
		public RuleCall getOwnedStatementStatementCSParserRuleCall_11_0() { return cOwnedStatementStatementCSParserRuleCall_11_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}
	public class TransformationCPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.nml.NML.TransformationCP");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransformKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOwnedModelsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedModelsModelTypeCSParserRuleCall_1_0 = (RuleCall)cOwnedModelsAssignment_1.eContents().get(0);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOwnedModelsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOwnedModelsModelTypeCSParserRuleCall_3_0 = (RuleCall)cOwnedModelsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cExtendsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cUnrestrictedNameParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final RuleCall cUnrestrictedNameParserRuleCall_4_2_1 = (RuleCall)cGroup_4_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cGuardKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Alternatives cAlternatives_6_1_0 = (Alternatives)cGroup_6_1.eContents().get(0);
		private final Keyword cOrKeyword_6_1_0_0 = (Keyword)cAlternatives_6_1_0.eContents().get(0);
		private final Keyword cAndKeyword_6_1_0_1 = (Keyword)cAlternatives_6_1_0.eContents().get(1);
		private final Assignment cOwnedConditionsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cOwnedConditionsConditionCSParserRuleCall_6_1_1_0 = (RuleCall)cOwnedConditionsAssignment_6_1_1.eContents().get(0);
		private final Assignment cOwnedStatementAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cOwnedStatementStatementCSParserRuleCall_7_0 = (RuleCall)cOwnedStatementAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//TransformationCP:
		//	'transform' ownedModels+=modelTypeCS
		//	'to' ownedModels+=modelTypeCS ('extends' UnrestrictedName (',' UnrestrictedName)*)?
		//	'{' ('guard' (('or' | 'and')? ownedConditions+=ConditionCS)+)?
		//	ownedStatement+=StatementCS+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'transform' ownedModels+=modelTypeCS 'to' ownedModels+=modelTypeCS ('extends' UnrestrictedName (',' UnrestrictedName)*)?
		//'{' ('guard' (('or' | 'and')? ownedConditions+=ConditionCS)+)? ownedStatement+=StatementCS+ '}'
		public Group getGroup() { return cGroup; }
		
		//'transform'
		public Keyword getTransformKeyword_0() { return cTransformKeyword_0; }
		
		//ownedModels+=modelTypeCS
		public Assignment getOwnedModelsAssignment_1() { return cOwnedModelsAssignment_1; }
		
		//modelTypeCS
		public RuleCall getOwnedModelsModelTypeCSParserRuleCall_1_0() { return cOwnedModelsModelTypeCSParserRuleCall_1_0; }
		
		//'to'
		public Keyword getToKeyword_2() { return cToKeyword_2; }
		
		//ownedModels+=modelTypeCS
		public Assignment getOwnedModelsAssignment_3() { return cOwnedModelsAssignment_3; }
		
		//modelTypeCS
		public RuleCall getOwnedModelsModelTypeCSParserRuleCall_3_0() { return cOwnedModelsModelTypeCSParserRuleCall_3_0; }
		
		//('extends' UnrestrictedName (',' UnrestrictedName)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'extends'
		public Keyword getExtendsKeyword_4_0() { return cExtendsKeyword_4_0; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameParserRuleCall_4_1() { return cUnrestrictedNameParserRuleCall_4_1; }
		
		//(',' UnrestrictedName)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameParserRuleCall_4_2_1() { return cUnrestrictedNameParserRuleCall_4_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//('guard' (('or' | 'and')? ownedConditions+=ConditionCS)+)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'guard'
		public Keyword getGuardKeyword_6_0() { return cGuardKeyword_6_0; }
		
		//(('or' | 'and')? ownedConditions+=ConditionCS)+
		public Group getGroup_6_1() { return cGroup_6_1; }
		
		//('or' | 'and')?
		public Alternatives getAlternatives_6_1_0() { return cAlternatives_6_1_0; }
		
		//'or'
		public Keyword getOrKeyword_6_1_0_0() { return cOrKeyword_6_1_0_0; }
		
		//'and'
		public Keyword getAndKeyword_6_1_0_1() { return cAndKeyword_6_1_0_1; }
		
		//ownedConditions+=ConditionCS
		public Assignment getOwnedConditionsAssignment_6_1_1() { return cOwnedConditionsAssignment_6_1_1; }
		
		//ConditionCS
		public RuleCall getOwnedConditionsConditionCSParserRuleCall_6_1_1_0() { return cOwnedConditionsConditionCSParserRuleCall_6_1_1_0; }
		
		//ownedStatement+=StatementCS+
		public Assignment getOwnedStatementAssignment_7() { return cOwnedStatementAssignment_7; }
		
		//StatementCS
		public RuleCall getOwnedStatementStatementCSParserRuleCall_7_0() { return cOwnedStatementStatementCSParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class ModelTypeCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.nml.NML.modelTypeCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIdentifierParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cUnrestrictedNameParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cExclamationMarkKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cUnrestrictedNameParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//modelTypeCS:
		//	name=Identifier ':' UnrestrictedName '!' UnrestrictedName;
		@Override public ParserRule getRule() { return rule; }
		
		//name=Identifier ':' UnrestrictedName '!' UnrestrictedName
		public Group getGroup() { return cGroup; }
		
		//name=Identifier
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_0_0() { return cNameIdentifierParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameParserRuleCall_2() { return cUnrestrictedNameParserRuleCall_2; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_3() { return cExclamationMarkKeyword_3; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameParserRuleCall_4() { return cUnrestrictedNameParserRuleCall_4; }
	}
	public class ModelOrderCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.nml.NML.modelOrderCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIdentifierParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cUnrestrictedNameParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cUnrestrictedNameParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//modelOrderCS:
		//	name=Identifier ':' '[' UnrestrictedName (',' UnrestrictedName)* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//name=Identifier ':' '[' UnrestrictedName (',' UnrestrictedName)* ']'
		public Group getGroup() { return cGroup; }
		
		//name=Identifier
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_0_0() { return cNameIdentifierParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameParserRuleCall_3() { return cUnrestrictedNameParserRuleCall_3; }
		
		//(',' UnrestrictedName)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameParserRuleCall_4_1() { return cUnrestrictedNameParserRuleCall_4_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}
	public class StatementCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.nml.NML.StatementCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOwnedElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedElementFQNParserRuleCall_1_0 = (RuleCall)cOwnedElementAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cColonColonEqualsSignKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Assignment cOwnedElementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOwnedElementFQNParserRuleCall_3_0 = (RuleCall)cOwnedElementAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cFullStopKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cEquivalentKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_5_0 = (Alternatives)cGroup_5.eContents().get(0);
		private final Keyword cPlusSignKeyword_5_0_0 = (Keyword)cAlternatives_5_0.eContents().get(0);
		private final Keyword cNewKeyword_5_0_1 = (Keyword)cAlternatives_5_0.eContents().get(1);
		private final Assignment cOwnedElementAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cOwnedElementFQNParserRuleCall_5_1_0 = (RuleCall)cOwnedElementAssignment_5_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//StatementCS:
		//	'var'? ownedElement+=FQN? ('=' | '::=')? ownedElement+=FQN ("." 'equivalent' '(' ')')? (('+' | 'new')
		//	ownedElement+=FQN)* ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'var'? ownedElement+=FQN? ('=' | '::=')? ownedElement+=FQN ("." 'equivalent' '(' ')')? (('+' | 'new')
		//ownedElement+=FQN)* ';'
		public Group getGroup() { return cGroup; }
		
		//'var'?
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//ownedElement+=FQN?
		public Assignment getOwnedElementAssignment_1() { return cOwnedElementAssignment_1; }
		
		//FQN
		public RuleCall getOwnedElementFQNParserRuleCall_1_0() { return cOwnedElementFQNParserRuleCall_1_0; }
		
		//('=' | '::=')?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//'::='
		public Keyword getColonColonEqualsSignKeyword_2_1() { return cColonColonEqualsSignKeyword_2_1; }
		
		//ownedElement+=FQN
		public Assignment getOwnedElementAssignment_3() { return cOwnedElementAssignment_3; }
		
		//FQN
		public RuleCall getOwnedElementFQNParserRuleCall_3_0() { return cOwnedElementFQNParserRuleCall_3_0; }
		
		//("." 'equivalent' '(' ')')?
		public Group getGroup_4() { return cGroup_4; }
		
		//"."
		public Keyword getFullStopKeyword_4_0() { return cFullStopKeyword_4_0; }
		
		//'equivalent'
		public Keyword getEquivalentKeyword_4_1() { return cEquivalentKeyword_4_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_2() { return cLeftParenthesisKeyword_4_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
		
		//(('+' | 'new') ownedElement+=FQN)*
		public Group getGroup_5() { return cGroup_5; }
		
		//'+' | 'new'
		public Alternatives getAlternatives_5_0() { return cAlternatives_5_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_5_0_0() { return cPlusSignKeyword_5_0_0; }
		
		//'new'
		public Keyword getNewKeyword_5_0_1() { return cNewKeyword_5_0_1; }
		
		//ownedElement+=FQN
		public Assignment getOwnedElementAssignment_5_1() { return cOwnedElementAssignment_5_1; }
		
		//FQN
		public RuleCall getOwnedElementFQNParserRuleCall_5_1_0() { return cOwnedElementFQNParserRuleCall_5_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class ConditionCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.nml.NML.ConditionCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedElementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedElementFQNParserRuleCall_0_0 = (RuleCall)cOwnedElementAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cLessThanSignGreaterThanSignKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		private final Keyword cExclamationMarkKeyword_1_4 = (Keyword)cAlternatives_1.eContents().get(4);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_5 = (Keyword)cAlternatives_1.eContents().get(5);
		private final Keyword cEqualsSignLessThanSignKeyword_1_6 = (Keyword)cAlternatives_1.eContents().get(6);
		private final Assignment cOwnedElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedElementFQNParserRuleCall_2_0 = (RuleCall)cOwnedElementAssignment_2.eContents().get(0);
		
		//ConditionCS:
		//	ownedElement+=FQN? ('>' | '<' | '=' | '<>' | '!' | '>=' | '=<')? ownedElement+=FQN;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedElement+=FQN? ('>' | '<' | '=' | '<>' | '!' | '>=' | '=<')? ownedElement+=FQN
		public Group getGroup() { return cGroup; }
		
		//ownedElement+=FQN?
		public Assignment getOwnedElementAssignment_0() { return cOwnedElementAssignment_0; }
		
		//FQN
		public RuleCall getOwnedElementFQNParserRuleCall_0_0() { return cOwnedElementFQNParserRuleCall_0_0; }
		
		//('>' | '<' | '=' | '<>' | '!' | '>=' | '=<')?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_0() { return cGreaterThanSignKeyword_1_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_1() { return cLessThanSignKeyword_1_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_2() { return cEqualsSignKeyword_1_2; }
		
		//'<>'
		public Keyword getLessThanSignGreaterThanSignKeyword_1_3() { return cLessThanSignGreaterThanSignKeyword_1_3; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_1_4() { return cExclamationMarkKeyword_1_4; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_1_5() { return cGreaterThanSignEqualsSignKeyword_1_5; }
		
		//'=<'
		public Keyword getEqualsSignLessThanSignKeyword_1_6() { return cEqualsSignLessThanSignKeyword_1_6; }
		
		//ownedElement+=FQN
		public Assignment getOwnedElementAssignment_2() { return cOwnedElementAssignment_2; }
		
		//FQN
		public RuleCall getOwnedElementFQNParserRuleCall_2_0() { return cOwnedElementFQNParserRuleCall_2_0; }
	}
	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.nml.NML.FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cUnrestrictedNameParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cIDParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final RuleCall cUnrestrictedNameParserRuleCall_1_1_0 = (RuleCall)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cIDParserRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//FQN:
		//	(UnrestrictedName | ID) (("." | "->") (UnrestrictedName | ID) '('? ')'?)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(UnrestrictedName | ID) (("." | "->") (UnrestrictedName | ID) '('? ')'?)*
		public Group getGroup() { return cGroup; }
		
		//UnrestrictedName | ID
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameParserRuleCall_0_0() { return cUnrestrictedNameParserRuleCall_0_0; }
		
		//ID
		public RuleCall getIDParserRuleCall_0_1() { return cIDParserRuleCall_0_1; }
		
		//(("." | "->") (UnrestrictedName | ID) '('? ')'?)*
		public Group getGroup_1() { return cGroup_1; }
		
		//"." | "->"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//"."
		public Keyword getFullStopKeyword_1_0_0() { return cFullStopKeyword_1_0_0; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_0_1() { return cHyphenMinusGreaterThanSignKeyword_1_0_1; }
		
		//UnrestrictedName | ID
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameParserRuleCall_1_1_0() { return cUnrestrictedNameParserRuleCall_1_1_0; }
		
		//ID
		public RuleCall getIDParserRuleCall_1_1_1() { return cIDParserRuleCall_1_1_1; }
		
		//'('?
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }
		
		//')'?
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}
	
	
	private final TopLevelCPElements pTopLevelCP;
	private final DomainCPElements pDomainCP;
	private final OctopusCPElements pOctopusCP;
	private final OursCPElements pOursCP;
	private final TransformationCPElements pTransformationCP;
	private final ModelTypeCSElements pModelTypeCS;
	private final ModelOrderCSElements pModelOrderCS;
	private final StatementCSElements pStatementCS;
	private final ConditionCSElements pConditionCS;
	private final FQNElements pFQN;
	
	private final Grammar grammar;
	
	private final EssentialOCLGrammarAccess gaEssentialOCL;
	
	private final BaseGrammarAccess gaBase;

	@Inject
	public NMLGrammarAccess(GrammarProvider grammarProvider,
			EssentialOCLGrammarAccess gaEssentialOCL,
			BaseGrammarAccess gaBase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaEssentialOCL = gaEssentialOCL;
		this.gaBase = gaBase;
		this.pTopLevelCP = new TopLevelCPElements();
		this.pDomainCP = new DomainCPElements();
		this.pOctopusCP = new OctopusCPElements();
		this.pOursCP = new OursCPElements();
		this.pTransformationCP = new TransformationCPElements();
		this.pModelTypeCS = new ModelTypeCSElements();
		this.pModelOrderCS = new ModelOrderCSElements();
		this.pStatementCS = new StatementCSElements();
		this.pConditionCS = new ConditionCSElements();
		this.pFQN = new FQNElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.nml.NML".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public EssentialOCLGrammarAccess getEssentialOCLGrammarAccess() {
		return gaEssentialOCL;
	}
	
	public BaseGrammarAccess getBaseGrammarAccess() {
		return gaBase;
	}

	
	//TopLevelCP:
	//	'module' name=Identifier '{'
	//	//		(ownedImports+=ImportCP)*
	//	ownedDomains+=DomainCP+ ('pre' UnrestrictedName? '{' ownedPre+=StatementCS* '}')? ('rule' UnrestrictedName
	//	ownedOctopus+=OctopusCP)* ('rule' UnrestrictedName ownedOurs+=OursCP)* ('rule' UnrestrictedName
	//	ownedTransformation+=TransformationCP)* ('post' UnrestrictedName? '{' ownedPre+=StatementCS* '}')?
	//	'}';
	public TopLevelCPElements getTopLevelCPAccess() {
		return pTopLevelCP;
	}
	
	public ParserRule getTopLevelCPRule() {
		return getTopLevelCPAccess().getRule();
	}
	
	////ImportCP returns base::ImportCS:
	////	('import' | 'domain') (name=Identifier ':')? ownedPathName=URIPathNameCS (isAll?='::*')?  
	////;
	//DomainCP:
	//	'import' (name=ID ':')? nsURI=URI ';'
	//	/*nsURI=URI /*ownedPathName=PathNameCS /* ownedPathName=Base::URI ownedPathElements+=URIFirstPathElementCS  =URIPathNameCS /*(isAll?='::*')?*/;
	public DomainCPElements getDomainCPAccess() {
		return pDomainCP;
	}
	
	public ParserRule getDomainCPRule() {
		return getDomainCPAccess().getRule();
	}
	
	//OctopusCP:
	//	'mergeOctopus' ownedModels+=modelTypeCS
	//	'with' ownedModels+=modelTypeCS (',' ownedModels+=modelTypeCS)* ('withBase' ownedModels+=modelTypeCS)?
	//	'into' ownedModels+=modelTypeCS ('extends' UnrestrictedName (',' UnrestrictedName)*)?
	//	'{'
	//	ownedConditions+=StatementCS+
	//	'}';
	public OctopusCPElements getOctopusCPAccess() {
		return pOctopusCP;
	}
	
	public ParserRule getOctopusCPRule() {
		return getOctopusCPAccess().getRule();
	}
	
	//OursCP:
	//	'mergeOurs' ownedModels+=modelTypeCS
	//	'with' ownedModels+=modelTypeCS (',' ownedModels+=modelTypeCS)* ('withBase' ownedModels+=modelTypeCS ('exists_in'
	//	INT)?)? ('priority' ownedOrders+=modelOrderCS (',' ownedOrders+=modelOrderCS)*)?
	//	'into' ownedModels+=modelTypeCS ('extends' UnrestrictedName (',' UnrestrictedName)*)?
	//	'{'
	//	ownedStatement+=StatementCS+
	//	'}';
	public OursCPElements getOursCPAccess() {
		return pOursCP;
	}
	
	public ParserRule getOursCPRule() {
		return getOursCPAccess().getRule();
	}
	
	//TransformationCP:
	//	'transform' ownedModels+=modelTypeCS
	//	'to' ownedModels+=modelTypeCS ('extends' UnrestrictedName (',' UnrestrictedName)*)?
	//	'{' ('guard' (('or' | 'and')? ownedConditions+=ConditionCS)+)?
	//	ownedStatement+=StatementCS+
	//	'}';
	public TransformationCPElements getTransformationCPAccess() {
		return pTransformationCP;
	}
	
	public ParserRule getTransformationCPRule() {
		return getTransformationCPAccess().getRule();
	}
	
	//modelTypeCS:
	//	name=Identifier ':' UnrestrictedName '!' UnrestrictedName;
	public ModelTypeCSElements getModelTypeCSAccess() {
		return pModelTypeCS;
	}
	
	public ParserRule getModelTypeCSRule() {
		return getModelTypeCSAccess().getRule();
	}
	
	//modelOrderCS:
	//	name=Identifier ':' '[' UnrestrictedName (',' UnrestrictedName)* ']';
	public ModelOrderCSElements getModelOrderCSAccess() {
		return pModelOrderCS;
	}
	
	public ParserRule getModelOrderCSRule() {
		return getModelOrderCSAccess().getRule();
	}
	
	//StatementCS:
	//	'var'? ownedElement+=FQN? ('=' | '::=')? ownedElement+=FQN ("." 'equivalent' '(' ')')? (('+' | 'new')
	//	ownedElement+=FQN)* ';';
	public StatementCSElements getStatementCSAccess() {
		return pStatementCS;
	}
	
	public ParserRule getStatementCSRule() {
		return getStatementCSAccess().getRule();
	}
	
	//ConditionCS:
	//	ownedElement+=FQN? ('>' | '<' | '=' | '<>' | '!' | '>=' | '=<')? ownedElement+=FQN;
	public ConditionCSElements getConditionCSAccess() {
		return pConditionCS;
	}
	
	public ParserRule getConditionCSRule() {
		return getConditionCSAccess().getRule();
	}
	
	//FQN:
	//	(UnrestrictedName | ID) (("." | "->") (UnrestrictedName | ID) '('? ')'?)*;
	public FQNElements getFQNAccess() {
		return pFQN;
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}
	
	////generate essentialOCLCST "http://www.eclipse.org/ocl/3.0.0/EssentialOCLCST"
	// Model ContextCS:
	//	ownedExpression=ExpCS;
	public EssentialOCLGrammarAccess.ModelElements getModelAccess() {
		return gaEssentialOCL.getModelAccess();
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	///** <<<This is a join point for derived grammars - replace with a more disciplined grammar extensibility>>> */
	//EssentialOCLReservedKeyword:
	//	'and' | 'and2' | 'else' | 'endif' | 'if' | 'implies' | 'implies2' | 'in' | 'let' | 'not' | 'not2' | 'or' | 'or2' |
	//	'then' | 'xor' | 'xor2';
	public EssentialOCLGrammarAccess.EssentialOCLReservedKeywordElements getEssentialOCLReservedKeywordAccess() {
		return gaEssentialOCL.getEssentialOCLReservedKeywordAccess();
	}
	
	public ParserRule getEssentialOCLReservedKeywordRule() {
		return getEssentialOCLReservedKeywordAccess().getRule();
	}
	
	///** <<<This is a join point for derived grammars - replace with a more disciplined grammar extensibility>>> */
	//EssentialOCLUnaryOperatorName:
	//	'-' | 'not' | 'not2';
	public EssentialOCLGrammarAccess.EssentialOCLUnaryOperatorNameElements getEssentialOCLUnaryOperatorNameAccess() {
		return gaEssentialOCL.getEssentialOCLUnaryOperatorNameAccess();
	}
	
	public ParserRule getEssentialOCLUnaryOperatorNameRule() {
		return getEssentialOCLUnaryOperatorNameAccess().getRule();
	}
	
	///** <<<This is a join point for derived grammars - replace with a more disciplined grammar extensibility>>> */
	//EssentialOCLInfixOperatorName:
	//	'*' | '/' | '+' | '-' | '>' | '<' | '>=' | '<=' | '=' | '<>' | 'and' | 'and2' | 'implies' | 'implies2' | 'or' | 'or2'
	//	| 'xor' | 'xor2';
	public EssentialOCLGrammarAccess.EssentialOCLInfixOperatorNameElements getEssentialOCLInfixOperatorNameAccess() {
		return gaEssentialOCL.getEssentialOCLInfixOperatorNameAccess();
	}
	
	public ParserRule getEssentialOCLInfixOperatorNameRule() {
		return getEssentialOCLInfixOperatorNameAccess().getRule();
	}
	
	///** <<<This is a join point for derived grammars - replace with a more disciplined grammar extensibility>>> */
	//EssentialOCLNavigationOperatorName:
	//	'.' | '->' | '?.' | '?->';
	public EssentialOCLGrammarAccess.EssentialOCLNavigationOperatorNameElements getEssentialOCLNavigationOperatorNameAccess() {
		return gaEssentialOCL.getEssentialOCLNavigationOperatorNameAccess();
	}
	
	public ParserRule getEssentialOCLNavigationOperatorNameRule() {
		return getEssentialOCLNavigationOperatorNameAccess().getRule();
	}
	
	//BinaryOperatorName:
	//	InfixOperatorName | NavigationOperatorName;
	public EssentialOCLGrammarAccess.BinaryOperatorNameElements getBinaryOperatorNameAccess() {
		return gaEssentialOCL.getBinaryOperatorNameAccess();
	}
	
	public ParserRule getBinaryOperatorNameRule() {
		return getBinaryOperatorNameAccess().getRule();
	}
	
	//InfixOperatorName:
	//	EssentialOCLInfixOperatorName;
	public EssentialOCLGrammarAccess.InfixOperatorNameElements getInfixOperatorNameAccess() {
		return gaEssentialOCL.getInfixOperatorNameAccess();
	}
	
	public ParserRule getInfixOperatorNameRule() {
		return getInfixOperatorNameAccess().getRule();
	}
	
	//NavigationOperatorName:
	//	EssentialOCLNavigationOperatorName;
	public EssentialOCLGrammarAccess.NavigationOperatorNameElements getNavigationOperatorNameAccess() {
		return gaEssentialOCL.getNavigationOperatorNameAccess();
	}
	
	public ParserRule getNavigationOperatorNameRule() {
		return getNavigationOperatorNameAccess().getRule();
	}
	
	//UnaryOperatorName:
	//	EssentialOCLUnaryOperatorName;
	public EssentialOCLGrammarAccess.UnaryOperatorNameElements getUnaryOperatorNameAccess() {
		return gaEssentialOCL.getUnaryOperatorNameAccess();
	}
	
	public ParserRule getUnaryOperatorNameRule() {
		return getUnaryOperatorNameAccess().getRule();
	}
	
	////---------------------------------------------------------------------
	// //  Names
	//
	////---------------------------------------------------------------------
	//
	///** <<<This is a join point for derived grammars - replace with a more disciplined grammar extensibility>>> */
	//EssentialOCLUnrestrictedName:
	//	Identifier;
	public EssentialOCLGrammarAccess.EssentialOCLUnrestrictedNameElements getEssentialOCLUnrestrictedNameAccess() {
		return gaEssentialOCL.getEssentialOCLUnrestrictedNameAccess();
	}
	
	public ParserRule getEssentialOCLUnrestrictedNameRule() {
		return getEssentialOCLUnrestrictedNameAccess().getRule();
	}
	
	//UnrestrictedName:
	//	EssentialOCLUnrestrictedName;
	public EssentialOCLGrammarAccess.UnrestrictedNameElements getUnrestrictedNameAccess() {
		return gaEssentialOCL.getUnrestrictedNameAccess();
	}
	
	public ParserRule getUnrestrictedNameRule() {
		return getUnrestrictedNameAccess().getRule();
	}
	
	///** <<<This is a join point for derived grammars - replace with a more disciplined grammar extensibility>>> */
	//EssentialOCLUnreservedName:
	//	UnrestrictedName | CollectionTypeIdentifier | PrimitiveTypeIdentifier | 'Map' | 'Tuple';
	public EssentialOCLGrammarAccess.EssentialOCLUnreservedNameElements getEssentialOCLUnreservedNameAccess() {
		return gaEssentialOCL.getEssentialOCLUnreservedNameAccess();
	}
	
	public ParserRule getEssentialOCLUnreservedNameRule() {
		return getEssentialOCLUnreservedNameAccess().getRule();
	}
	
	//UnreservedName:
	//	EssentialOCLUnreservedName;
	public EssentialOCLGrammarAccess.UnreservedNameElements getUnreservedNameAccess() {
		return gaEssentialOCL.getUnreservedNameAccess();
	}
	
	public ParserRule getUnreservedNameRule() {
		return getUnreservedNameAccess().getRule();
	}
	
	//URIPathNameCS base::PathNameCS:
	//	ownedPathElements+=URIFirstPathElementCS ('::' ownedPathElements+=NextPathElementCS)*;
	public EssentialOCLGrammarAccess.URIPathNameCSElements getURIPathNameCSAccess() {
		return gaEssentialOCL.getURIPathNameCSAccess();
	}
	
	public ParserRule getURIPathNameCSRule() {
		return getURIPathNameCSAccess().getRule();
	}
	
	//URIFirstPathElementCS base::PathElementCS:
	//	referredElement=[pivot::NamedElement|UnrestrictedName] | {base::PathElementWithURICS}
	//	referredElement=[pivot::Namespace|URI];
	public EssentialOCLGrammarAccess.URIFirstPathElementCSElements getURIFirstPathElementCSAccess() {
		return gaEssentialOCL.getURIFirstPathElementCSAccess();
	}
	
	public ParserRule getURIFirstPathElementCSRule() {
		return getURIFirstPathElementCSAccess().getRule();
	}
	
	//SimplePathNameCS base::PathNameCS:
	//	ownedPathElements+=FirstPathElementCS;
	public EssentialOCLGrammarAccess.SimplePathNameCSElements getSimplePathNameCSAccess() {
		return gaEssentialOCL.getSimplePathNameCSAccess();
	}
	
	public ParserRule getSimplePathNameCSRule() {
		return getSimplePathNameCSAccess().getRule();
	}
	
	////---------------------------------------------------------------------
	// //  Types
	//
	////---------------------------------------------------------------------
	// PrimitiveTypeIdentifier:
	//	'Boolean' | 'Integer' | 'Real' | 'String' | 'UnlimitedNatural' | 'OclAny' | 'OclInvalid' | 'OclVoid';
	public EssentialOCLGrammarAccess.PrimitiveTypeIdentifierElements getPrimitiveTypeIdentifierAccess() {
		return gaEssentialOCL.getPrimitiveTypeIdentifierAccess();
	}
	
	public ParserRule getPrimitiveTypeIdentifierRule() {
		return getPrimitiveTypeIdentifierAccess().getRule();
	}
	
	//PrimitiveTypeCS base::PrimitiveTypeRefCS:
	//	name=PrimitiveTypeIdentifier;
	public EssentialOCLGrammarAccess.PrimitiveTypeCSElements getPrimitiveTypeCSAccess() {
		return gaEssentialOCL.getPrimitiveTypeCSAccess();
	}
	
	public ParserRule getPrimitiveTypeCSRule() {
		return getPrimitiveTypeCSAccess().getRule();
	}
	
	//CollectionTypeIdentifier:
	//	'Set' | 'Bag' | 'Sequence' | 'Collection' | 'OrderedSet';
	public EssentialOCLGrammarAccess.CollectionTypeIdentifierElements getCollectionTypeIdentifierAccess() {
		return gaEssentialOCL.getCollectionTypeIdentifierAccess();
	}
	
	public ParserRule getCollectionTypeIdentifierRule() {
		return getCollectionTypeIdentifierAccess().getRule();
	}
	
	//CollectionTypeCS:
	//	name=CollectionTypeIdentifier ('(' ownedType=TypeExpWithoutMultiplicityCS ownedCollectionMultiplicity=MultiplicityCS?
	//	')')?;
	public EssentialOCLGrammarAccess.CollectionTypeCSElements getCollectionTypeCSAccess() {
		return gaEssentialOCL.getCollectionTypeCSAccess();
	}
	
	public ParserRule getCollectionTypeCSRule() {
		return getCollectionTypeCSAccess().getRule();
	}
	
	//MapTypeCS:
	//	name='Map' ('(' ownedKeyType=TypeExpCS ',' ownedValueType=TypeExpCS ')')?;
	public EssentialOCLGrammarAccess.MapTypeCSElements getMapTypeCSAccess() {
		return gaEssentialOCL.getMapTypeCSAccess();
	}
	
	public ParserRule getMapTypeCSRule() {
		return getMapTypeCSAccess().getRule();
	}
	
	//TupleTypeCS base::TupleTypeCS:
	//	name='Tuple' ('(' (ownedParts+=TuplePartCS (',' ownedParts+=TuplePartCS)*)? ')')?;
	public EssentialOCLGrammarAccess.TupleTypeCSElements getTupleTypeCSAccess() {
		return gaEssentialOCL.getTupleTypeCSAccess();
	}
	
	public ParserRule getTupleTypeCSRule() {
		return getTupleTypeCSAccess().getRule();
	}
	
	//TuplePartCS base::TuplePartCS:
	//	name=UnrestrictedName ':' ownedType=TypeExpCS;
	public EssentialOCLGrammarAccess.TuplePartCSElements getTuplePartCSAccess() {
		return gaEssentialOCL.getTuplePartCSAccess();
	}
	
	public ParserRule getTuplePartCSRule() {
		return getTuplePartCSAccess().getRule();
	}
	
	////---------------------------------------------------------------------
	// //  Literals
	//
	////---------------------------------------------------------------------
	// CollectionLiteralExpCS:
	//	ownedType=CollectionTypeCS '{' (ownedParts+=CollectionLiteralPartCS (',' ownedParts+=CollectionLiteralPartCS)*)? '}';
	public EssentialOCLGrammarAccess.CollectionLiteralExpCSElements getCollectionLiteralExpCSAccess() {
		return gaEssentialOCL.getCollectionLiteralExpCSAccess();
	}
	
	public ParserRule getCollectionLiteralExpCSRule() {
		return getCollectionLiteralExpCSAccess().getRule();
	}
	
	//CollectionLiteralPartCS:
	//	ownedExpression=ExpCS ('..' ownedLastExpression=ExpCS)? | ownedExpression=PatternExpCS;
	public EssentialOCLGrammarAccess.CollectionLiteralPartCSElements getCollectionLiteralPartCSAccess() {
		return gaEssentialOCL.getCollectionLiteralPartCSAccess();
	}
	
	public ParserRule getCollectionLiteralPartCSRule() {
		return getCollectionLiteralPartCSAccess().getRule();
	}
	
	//CollectionPatternCS:
	//	ownedType=CollectionTypeCS '{' (ownedParts+=PatternExpCS (',' ownedParts+=PatternExpCS)* ('++'
	//	restVariableName=Identifier))? '}';
	public EssentialOCLGrammarAccess.CollectionPatternCSElements getCollectionPatternCSAccess() {
		return gaEssentialOCL.getCollectionPatternCSAccess();
	}
	
	public ParserRule getCollectionPatternCSRule() {
		return getCollectionPatternCSAccess().getRule();
	}
	
	//ShadowPartCS:
	//	referredProperty=[pivot::Property|UnrestrictedName] '=' ownedInitExpression=(ExpCS | PatternExpCS) |
	//	ownedInitExpression=StringLiteralExpCS;
	public EssentialOCLGrammarAccess.ShadowPartCSElements getShadowPartCSAccess() {
		return gaEssentialOCL.getShadowPartCSAccess();
	}
	
	public ParserRule getShadowPartCSRule() {
		return getShadowPartCSAccess().getRule();
	}
	
	//PatternExpCS:
	//	patternVariableName=UnrestrictedName? ':' ownedPatternType=TypeExpCS;
	public EssentialOCLGrammarAccess.PatternExpCSElements getPatternExpCSAccess() {
		return gaEssentialOCL.getPatternExpCSAccess();
	}
	
	public ParserRule getPatternExpCSRule() {
		return getPatternExpCSAccess().getRule();
	}
	
	//LambdaLiteralExpCS:
	//	'Lambda' '{' ownedExpressionCS=ExpCS '}';
	public EssentialOCLGrammarAccess.LambdaLiteralExpCSElements getLambdaLiteralExpCSAccess() {
		return gaEssentialOCL.getLambdaLiteralExpCSAccess();
	}
	
	public ParserRule getLambdaLiteralExpCSRule() {
		return getLambdaLiteralExpCSAccess().getRule();
	}
	
	//MapLiteralExpCS:
	//	ownedType=MapTypeCS '{' (ownedParts+=MapLiteralPartCS (',' ownedParts+=MapLiteralPartCS)*)? '}';
	public EssentialOCLGrammarAccess.MapLiteralExpCSElements getMapLiteralExpCSAccess() {
		return gaEssentialOCL.getMapLiteralExpCSAccess();
	}
	
	public ParserRule getMapLiteralExpCSRule() {
		return getMapLiteralExpCSAccess().getRule();
	}
	
	//MapLiteralPartCS:
	//	ownedKey=ExpCS '<-' ownedValue=ExpCS;
	public EssentialOCLGrammarAccess.MapLiteralPartCSElements getMapLiteralPartCSAccess() {
		return gaEssentialOCL.getMapLiteralPartCSAccess();
	}
	
	public ParserRule getMapLiteralPartCSRule() {
		return getMapLiteralPartCSAccess().getRule();
	}
	
	//PrimitiveLiteralExpCS:
	//	NumberLiteralExpCS | StringLiteralExpCS | BooleanLiteralExpCS | UnlimitedNaturalLiteralExpCS | InvalidLiteralExpCS |
	//	NullLiteralExpCS;
	public EssentialOCLGrammarAccess.PrimitiveLiteralExpCSElements getPrimitiveLiteralExpCSAccess() {
		return gaEssentialOCL.getPrimitiveLiteralExpCSAccess();
	}
	
	public ParserRule getPrimitiveLiteralExpCSRule() {
		return getPrimitiveLiteralExpCSAccess().getRule();
	}
	
	//TupleLiteralExpCS:
	//	'Tuple' '{' ownedParts+=TupleLiteralPartCS (',' ownedParts+=TupleLiteralPartCS)* '}';
	public EssentialOCLGrammarAccess.TupleLiteralExpCSElements getTupleLiteralExpCSAccess() {
		return gaEssentialOCL.getTupleLiteralExpCSAccess();
	}
	
	public ParserRule getTupleLiteralExpCSRule() {
		return getTupleLiteralExpCSAccess().getRule();
	}
	
	//TupleLiteralPartCS:
	//	name=UnrestrictedName (':' ownedType=TypeExpCS)? '=' ownedInitExpression=ExpCS;
	public EssentialOCLGrammarAccess.TupleLiteralPartCSElements getTupleLiteralPartCSAccess() {
		return gaEssentialOCL.getTupleLiteralPartCSAccess();
	}
	
	public ParserRule getTupleLiteralPartCSRule() {
		return getTupleLiteralPartCSAccess().getRule();
	}
	
	//NumberLiteralExpCS:
	//	symbol=NUMBER_LITERAL;
	public EssentialOCLGrammarAccess.NumberLiteralExpCSElements getNumberLiteralExpCSAccess() {
		return gaEssentialOCL.getNumberLiteralExpCSAccess();
	}
	
	public ParserRule getNumberLiteralExpCSRule() {
		return getNumberLiteralExpCSAccess().getRule();
	}
	
	//StringLiteralExpCS:
	//	segments+=StringLiteral+;
	public EssentialOCLGrammarAccess.StringLiteralExpCSElements getStringLiteralExpCSAccess() {
		return gaEssentialOCL.getStringLiteralExpCSAccess();
	}
	
	public ParserRule getStringLiteralExpCSRule() {
		return getStringLiteralExpCSAccess().getRule();
	}
	
	//BooleanLiteralExpCS:
	//	symbol='true' | symbol='false';
	public EssentialOCLGrammarAccess.BooleanLiteralExpCSElements getBooleanLiteralExpCSAccess() {
		return gaEssentialOCL.getBooleanLiteralExpCSAccess();
	}
	
	public ParserRule getBooleanLiteralExpCSRule() {
		return getBooleanLiteralExpCSAccess().getRule();
	}
	
	//UnlimitedNaturalLiteralExpCS:
	//	{UnlimitedNaturalLiteralExpCS} '*';
	public EssentialOCLGrammarAccess.UnlimitedNaturalLiteralExpCSElements getUnlimitedNaturalLiteralExpCSAccess() {
		return gaEssentialOCL.getUnlimitedNaturalLiteralExpCSAccess();
	}
	
	public ParserRule getUnlimitedNaturalLiteralExpCSRule() {
		return getUnlimitedNaturalLiteralExpCSAccess().getRule();
	}
	
	//InvalidLiteralExpCS:
	//	{InvalidLiteralExpCS} 'invalid';
	public EssentialOCLGrammarAccess.InvalidLiteralExpCSElements getInvalidLiteralExpCSAccess() {
		return gaEssentialOCL.getInvalidLiteralExpCSAccess();
	}
	
	public ParserRule getInvalidLiteralExpCSRule() {
		return getInvalidLiteralExpCSAccess().getRule();
	}
	
	//NullLiteralExpCS:
	//	{NullLiteralExpCS} 'null';
	public EssentialOCLGrammarAccess.NullLiteralExpCSElements getNullLiteralExpCSAccess() {
		return gaEssentialOCL.getNullLiteralExpCSAccess();
	}
	
	public ParserRule getNullLiteralExpCSRule() {
		return getNullLiteralExpCSAccess().getRule();
	}
	
	//TypeLiteralCS base::TypedRefCS:
	//	PrimitiveTypeCS | CollectionTypeCS | MapTypeCS | TupleTypeCS;
	public EssentialOCLGrammarAccess.TypeLiteralCSElements getTypeLiteralCSAccess() {
		return gaEssentialOCL.getTypeLiteralCSAccess();
	}
	
	public ParserRule getTypeLiteralCSRule() {
		return getTypeLiteralCSAccess().getRule();
	}
	
	//TypeLiteralWithMultiplicityCS base::TypedRefCS:
	//	TypeLiteralCS ownedMultiplicity=MultiplicityCS?;
	public EssentialOCLGrammarAccess.TypeLiteralWithMultiplicityCSElements getTypeLiteralWithMultiplicityCSAccess() {
		return gaEssentialOCL.getTypeLiteralWithMultiplicityCSAccess();
	}
	
	public ParserRule getTypeLiteralWithMultiplicityCSRule() {
		return getTypeLiteralWithMultiplicityCSAccess().getRule();
	}
	
	//TypeLiteralExpCS:
	//	ownedType=TypeLiteralWithMultiplicityCS;
	public EssentialOCLGrammarAccess.TypeLiteralExpCSElements getTypeLiteralExpCSAccess() {
		return gaEssentialOCL.getTypeLiteralExpCSAccess();
	}
	
	public ParserRule getTypeLiteralExpCSRule() {
		return getTypeLiteralExpCSAccess().getRule();
	}
	
	//TypeNameExpCS:
	//	ownedPathName=PathNameCS (ownedCurlyBracketedClause=CurlyBracketedClauseCS ('{' ownedPatternGuard=ExpCS '}')?)?;
	public EssentialOCLGrammarAccess.TypeNameExpCSElements getTypeNameExpCSAccess() {
		return gaEssentialOCL.getTypeNameExpCSAccess();
	}
	
	public ParserRule getTypeNameExpCSRule() {
		return getTypeNameExpCSAccess().getRule();
	}
	
	//TypeExpWithoutMultiplicityCS base::TypedRefCS:
	//	TypeNameExpCS | TypeLiteralCS | CollectionPatternCS;
	public EssentialOCLGrammarAccess.TypeExpWithoutMultiplicityCSElements getTypeExpWithoutMultiplicityCSAccess() {
		return gaEssentialOCL.getTypeExpWithoutMultiplicityCSAccess();
	}
	
	public ParserRule getTypeExpWithoutMultiplicityCSRule() {
		return getTypeExpWithoutMultiplicityCSAccess().getRule();
	}
	
	//TypeExpCS base::TypedRefCS:
	//	TypeExpWithoutMultiplicityCS ownedMultiplicity=MultiplicityCS?;
	public EssentialOCLGrammarAccess.TypeExpCSElements getTypeExpCSAccess() {
		return gaEssentialOCL.getTypeExpCSAccess();
	}
	
	public ParserRule getTypeExpCSRule() {
		return getTypeExpCSAccess().getRule();
	}
	
	////---------------------------------------------------------------------
	// //  Expressions
	//
	////---------------------------------------------------------------------
	//
	//// An ExpCS permits a LetExpCS only in the final term to ensure
	//
	////  that let is right associative, whereas infix operators are left associative.
	//
	////   a = 64 / 16 / let b : Integer in 8 / let c : Integer in 4 
	// // is
	//
	////   a = (64 / 16) / (let b : Integer in 8 / (let c : Integer in 4 ))
	//
	///* An expression elaborates a prefixed expression with zero or more binary operator and expression suffixes.
	// * An optionally prefixed let expression is permitted except when suffixed with further expressions.*/
	//ExpCS:
	//	PrefixedPrimaryExpCS ({InfixExpCS.ownedLeft=current} name=BinaryOperatorName ownedRight=ExpCS)? | PrefixedLetExpCS;
	public EssentialOCLGrammarAccess.ExpCSElements getExpCSAccess() {
		return gaEssentialOCL.getExpCSAccess();
	}
	
	public ParserRule getExpCSRule() {
		return getExpCSAccess().getRule();
	}
	
	///* A prefixed let expression elaborates a let expression with zero or more unary prefix operators. */ PrefixedLetExpCS
	//ExpCS:
	//	{PrefixExpCS} name=UnaryOperatorName ownedRight=PrefixedLetExpCS | LetExpCS;
	public EssentialOCLGrammarAccess.PrefixedLetExpCSElements getPrefixedLetExpCSAccess() {
		return gaEssentialOCL.getPrefixedLetExpCSAccess();
	}
	
	public ParserRule getPrefixedLetExpCSRule() {
		return getPrefixedLetExpCSAccess().getRule();
	}
	
	///* A prefixed primary expression elaborates a primary expression with zero or more unary prefix operators. */
	//PrefixedPrimaryExpCS ExpCS:
	//	{PrefixExpCS} name=UnaryOperatorName ownedRight=PrefixedPrimaryExpCS | PrimaryExpCS;
	public EssentialOCLGrammarAccess.PrefixedPrimaryExpCSElements getPrefixedPrimaryExpCSAccess() {
		return gaEssentialOCL.getPrefixedPrimaryExpCSAccess();
	}
	
	public ParserRule getPrefixedPrimaryExpCSRule() {
		return getPrefixedPrimaryExpCSAccess().getRule();
	}
	
	///* A primary expression identifies the basic expressions from which more complex expressions may be constructed. */
	//PrimaryExpCS ExpCS:
	//	NestedExpCS | IfExpCS | SelfExpCS | PrimitiveLiteralExpCS | TupleLiteralExpCS | MapLiteralExpCS |
	//	CollectionLiteralExpCS | LambdaLiteralExpCS | TypeLiteralExpCS | NameExpCS;
	public EssentialOCLGrammarAccess.PrimaryExpCSElements getPrimaryExpCSAccess() {
		return gaEssentialOCL.getPrimaryExpCSAccess();
	}
	
	public ParserRule getPrimaryExpCSRule() {
		return getPrimaryExpCSAccess().getRule();
	}
	
	///* A name expression is a generalised rule for expressions that start with a name and which may be followed by square, round or
	// * curly bracket clauses and optionally an @pre as well.*/
	//NameExpCS:
	//	ownedPathName=PathNameCS ownedSquareBracketedClauses+=SquareBracketedClauseCS*
	//	ownedRoundBracketedClause=RoundBracketedClauseCS? ownedCurlyBracketedClause=CurlyBracketedClauseCS? (isPre?='@'
	//	'pre')?;
	public EssentialOCLGrammarAccess.NameExpCSElements getNameExpCSAccess() {
		return gaEssentialOCL.getNameExpCSAccess();
	}
	
	public ParserRule getNameExpCSRule() {
		return getNameExpCSAccess().getRule();
	}
	
	///* A curly bracket clause is a generalized rule for the literal arguments of collections, maps, tuples and shadows.*/
	//CurlyBracketedClauseCS:
	//	{CurlyBracketedClauseCS} '{' (ownedParts+=ShadowPartCS (',' ownedParts+=ShadowPartCS)*)? '}';
	public EssentialOCLGrammarAccess.CurlyBracketedClauseCSElements getCurlyBracketedClauseCSAccess() {
		return gaEssentialOCL.getCurlyBracketedClauseCSAccess();
	}
	
	public ParserRule getCurlyBracketedClauseCSRule() {
		return getCurlyBracketedClauseCSAccess().getRule();
	}
	
	///* A curly bracket clause is a generalized rule for template specialisations and operations arguments.*/
	//RoundBracketedClauseCS:
	//	{RoundBracketedClauseCS} '(' (ownedArguments+=NavigatingArgCS ownedArguments+=(NavigatingCommaArgCS |
	//	NavigatingSemiArgCS | NavigatingBarArgCS)*)? ')';
	public EssentialOCLGrammarAccess.RoundBracketedClauseCSElements getRoundBracketedClauseCSAccess() {
		return gaEssentialOCL.getRoundBracketedClauseCSAccess();
	}
	
	public ParserRule getRoundBracketedClauseCSRule() {
		return getRoundBracketedClauseCSAccess().getRule();
	}
	
	///* A square bracket clause is a generalized rule for association class qualifiers and roles.*/ SquareBracketedClauseCS:
	//	'[' ownedTerms+=ExpCS (',' ownedTerms+=ExpCS)* ']';
	public EssentialOCLGrammarAccess.SquareBracketedClauseCSElements getSquareBracketedClauseCSAccess() {
		return gaEssentialOCL.getSquareBracketedClauseCSAccess();
	}
	
	public ParserRule getSquareBracketedClauseCSRule() {
		return getSquareBracketedClauseCSAccess().getRule();
	}
	
	///* A navigating argument is a generalized rule for the first argument in a round bracket clause. This is typically the first operation
	// * parameter or an iterator. */
	//NavigatingArgCS:
	//	ownedNameExpression=NavigatingArgExpCS ('<-' ownedCoIterator=CoIteratorVariableCS ('=' ownedInitExpression=ExpCS)? |
	//	':' ownedType=TypeExpCS ('<-' ownedCoIterator=CoIteratorVariableCS)? ('=' ownedInitExpression=ExpCS)? | (':'
	//	ownedType=TypeExpCS)? ('<-' ownedCoIterator=CoIteratorVariableCS)? 'in' ownedInitExpression=ExpCS)? | ':'
	//	ownedType=TypeExpCS;
	public EssentialOCLGrammarAccess.NavigatingArgCSElements getNavigatingArgCSAccess() {
		return gaEssentialOCL.getNavigatingArgCSAccess();
	}
	
	public ParserRule getNavigatingArgCSRule() {
		return getNavigatingArgCSAccess().getRule();
	}
	
	//// Type-less init is an illegal infix expression
	//
	///* A navigating bar argument is a generalized rule for a bar-prefixed argument in a round bracket clause. This is typically the body of an iteration. */
	//NavigatingBarArgCS NavigatingArgCS:
	//	prefix='|' ownedNameExpression=NavigatingArgExpCS (':' ownedType=TypeExpCS ('=' ownedInitExpression=ExpCS)?)?;
	public EssentialOCLGrammarAccess.NavigatingBarArgCSElements getNavigatingBarArgCSAccess() {
		return gaEssentialOCL.getNavigatingBarArgCSAccess();
	}
	
	public ParserRule getNavigatingBarArgCSRule() {
		return getNavigatingBarArgCSAccess().getRule();
	}
	
	//// Type-less init is an illegal infix expression
	//
	///* A navigating comma argument is a generalized rule for non-first argument in a round bracket clause. These are typically non-first operation
	// * parameters or a second iterator. */
	//NavigatingCommaArgCS NavigatingArgCS:
	//	prefix=',' ownedNameExpression=NavigatingArgExpCS ('<-' ownedCoIterator=CoIteratorVariableCS ('='
	//	ownedInitExpression=ExpCS)? | ':' ownedType=TypeExpCS ('<-' ownedCoIterator=CoIteratorVariableCS)? ('='
	//	ownedInitExpression=ExpCS)? | (':' ownedType=TypeExpCS)? ('<-' ownedCoIterator=CoIteratorVariableCS)? 'in'
	//	ownedInitExpression=ExpCS)?;
	public EssentialOCLGrammarAccess.NavigatingCommaArgCSElements getNavigatingCommaArgCSAccess() {
		return gaEssentialOCL.getNavigatingCommaArgCSAccess();
	}
	
	public ParserRule getNavigatingCommaArgCSRule() {
		return getNavigatingCommaArgCSAccess().getRule();
	}
	
	//// Type-less init is an illegal infix expression
	//
	///* A navigating semi argument is a generalized rule for a semicolon prefixed argument in a round bracket clause. This is typically an iterate accumulator. */
	//NavigatingSemiArgCS NavigatingArgCS:
	//	prefix=';' ownedNameExpression=NavigatingArgExpCS (':' ownedType=TypeExpCS ('=' ownedInitExpression=ExpCS)?)?;
	public EssentialOCLGrammarAccess.NavigatingSemiArgCSElements getNavigatingSemiArgCSAccess() {
		return gaEssentialOCL.getNavigatingSemiArgCSAccess();
	}
	
	public ParserRule getNavigatingSemiArgCSRule() {
		return getNavigatingSemiArgCSAccess().getRule();
	}
	
	//// Type-less init is an illegal infix expression
	// NavigatingArgExpCS ExpCS:
	//	ExpCS //	'?'	-- defined by Complete OCL
	//;
	public EssentialOCLGrammarAccess.NavigatingArgExpCSElements getNavigatingArgExpCSAccess() {
		return gaEssentialOCL.getNavigatingArgExpCSAccess();
	}
	
	public ParserRule getNavigatingArgExpCSRule() {
		return getNavigatingArgExpCSAccess().getRule();
	}
	
	//CoIteratorVariableCS VariableCS:
	//	name=UnrestrictedName (':' ownedType=TypeExpCS)?;
	public EssentialOCLGrammarAccess.CoIteratorVariableCSElements getCoIteratorVariableCSAccess() {
		return gaEssentialOCL.getCoIteratorVariableCSAccess();
	}
	
	public ParserRule getCoIteratorVariableCSRule() {
		return getCoIteratorVariableCSAccess().getRule();
	}
	
	//IfExpCS:
	//	'if' ownedCondition=(ExpCS | PatternExpCS) 'then' ownedThenExpression=ExpCS //	ifThenExpressions+=IfThenExpCS
	//
	//	ownedIfThenExpressions+=ElseIfThenExpCS* 'else' ownedElseExpression=ExpCS 'endif';
	public EssentialOCLGrammarAccess.IfExpCSElements getIfExpCSAccess() {
		return gaEssentialOCL.getIfExpCSAccess();
	}
	
	public ParserRule getIfExpCSRule() {
		return getIfExpCSAccess().getRule();
	}
	
	////IfThenExpCS returns IfThenExpCS:
	// //	'if' condition=ExpCS
	// //	'then' thenExpression=ExpCS
	// //;
	// ElseIfThenExpCS
	//IfThenExpCS:
	//	'elseif' ownedCondition=ExpCS 'then' ownedThenExpression=ExpCS;
	public EssentialOCLGrammarAccess.ElseIfThenExpCSElements getElseIfThenExpCSAccess() {
		return gaEssentialOCL.getElseIfThenExpCSAccess();
	}
	
	public ParserRule getElseIfThenExpCSRule() {
		return getElseIfThenExpCSAccess().getRule();
	}
	
	//LetExpCS:
	//	'let' ownedVariables+=LetVariableCS (',' ownedVariables+=LetVariableCS)* 'in' ownedInExpression=ExpCS;
	public EssentialOCLGrammarAccess.LetExpCSElements getLetExpCSAccess() {
		return gaEssentialOCL.getLetExpCSAccess();
	}
	
	public ParserRule getLetExpCSRule() {
		return getLetExpCSAccess().getRule();
	}
	
	//LetVariableCS:
	//	name=UnrestrictedName ownedRoundBracketedClause=RoundBracketedClauseCS? (':' ownedType=TypeExpCS)? '='
	//	ownedInitExpression=ExpCS;
	public EssentialOCLGrammarAccess.LetVariableCSElements getLetVariableCSAccess() {
		return gaEssentialOCL.getLetVariableCSAccess();
	}
	
	public ParserRule getLetVariableCSRule() {
		return getLetVariableCSAccess().getRule();
	}
	
	//NestedExpCS:
	//	'(' ownedExpression=ExpCS ')';
	public EssentialOCLGrammarAccess.NestedExpCSElements getNestedExpCSAccess() {
		return gaEssentialOCL.getNestedExpCSAccess();
	}
	
	public ParserRule getNestedExpCSRule() {
		return getNestedExpCSAccess().getRule();
	}
	
	//SelfExpCS:
	//	{SelfExpCS} 'self';
	public EssentialOCLGrammarAccess.SelfExpCSElements getSelfExpCSAccess() {
		return gaEssentialOCL.getSelfExpCSAccess();
	}
	
	public ParserRule getSelfExpCSRule() {
		return getSelfExpCSAccess().getRule();
	}
	
	//MultiplicityBoundsCS:
	//	lowerBound=LOWER ('..' upperBound=UPPER)?;
	public BaseGrammarAccess.MultiplicityBoundsCSElements getMultiplicityBoundsCSAccess() {
		return gaBase.getMultiplicityBoundsCSAccess();
	}
	
	public ParserRule getMultiplicityBoundsCSRule() {
		return getMultiplicityBoundsCSAccess().getRule();
	}
	
	//MultiplicityCS:
	//	'[' (MultiplicityBoundsCS | MultiplicityStringCS) ('|?' | isNullFree?='|1')? ']';
	public BaseGrammarAccess.MultiplicityCSElements getMultiplicityCSAccess() {
		return gaBase.getMultiplicityCSAccess();
	}
	
	public ParserRule getMultiplicityCSRule() {
		return getMultiplicityCSAccess().getRule();
	}
	
	//MultiplicityStringCS:
	//	stringBounds=('*' | '+' | '?');
	public BaseGrammarAccess.MultiplicityStringCSElements getMultiplicityStringCSAccess() {
		return gaBase.getMultiplicityStringCSAccess();
	}
	
	public ParserRule getMultiplicityStringCSRule() {
		return getMultiplicityStringCSAccess().getRule();
	}
	
	//PathNameCS:
	//	ownedPathElements+=FirstPathElementCS ('::' ownedPathElements+=NextPathElementCS)*;
	public BaseGrammarAccess.PathNameCSElements getPathNameCSAccess() {
		return gaBase.getPathNameCSAccess();
	}
	
	public ParserRule getPathNameCSRule() {
		return getPathNameCSAccess().getRule();
	}
	
	//FirstPathElementCS PathElementCS:
	//	referredElement=[pivot::NamedElement|super::UnrestrictedName];
	public BaseGrammarAccess.FirstPathElementCSElements getFirstPathElementCSAccess() {
		return gaBase.getFirstPathElementCSAccess();
	}
	
	public ParserRule getFirstPathElementCSRule() {
		return getFirstPathElementCSAccess().getRule();
	}
	
	//NextPathElementCS PathElementCS:
	//	referredElement=[pivot::NamedElement|super::UnreservedName];
	public BaseGrammarAccess.NextPathElementCSElements getNextPathElementCSAccess() {
		return gaBase.getNextPathElementCSAccess();
	}
	
	public ParserRule getNextPathElementCSRule() {
		return getNextPathElementCSAccess().getRule();
	}
	
	//TemplateBindingCS:
	//	ownedSubstitutions+=TemplateParameterSubstitutionCS (',' ownedSubstitutions+=TemplateParameterSubstitutionCS)*
	//	ownedMultiplicity=MultiplicityCS?;
	public BaseGrammarAccess.TemplateBindingCSElements getTemplateBindingCSAccess() {
		return gaBase.getTemplateBindingCSAccess();
	}
	
	public ParserRule getTemplateBindingCSRule() {
		return getTemplateBindingCSAccess().getRule();
	}
	
	//TemplateParameterSubstitutionCS:
	//	ownedActualParameter=TypeRefCS;
	public BaseGrammarAccess.TemplateParameterSubstitutionCSElements getTemplateParameterSubstitutionCSAccess() {
		return gaBase.getTemplateParameterSubstitutionCSAccess();
	}
	
	public ParserRule getTemplateParameterSubstitutionCSRule() {
		return getTemplateParameterSubstitutionCSAccess().getRule();
	}
	
	//TemplateSignatureCS:
	//	'(' ownedParameters+=TypeParameterCS (',' ownedParameters+=TypeParameterCS)* ')';
	public BaseGrammarAccess.TemplateSignatureCSElements getTemplateSignatureCSAccess() {
		return gaBase.getTemplateSignatureCSAccess();
	}
	
	public ParserRule getTemplateSignatureCSRule() {
		return getTemplateSignatureCSAccess().getRule();
	}
	
	//TypeParameterCS:
	//	name=super::UnrestrictedName ('extends' ownedExtends+=TypedRefCS ('&&' ownedExtends+=TypedRefCS)*)?;
	public BaseGrammarAccess.TypeParameterCSElements getTypeParameterCSAccess() {
		return gaBase.getTypeParameterCSAccess();
	}
	
	public ParserRule getTypeParameterCSRule() {
		return getTypeParameterCSAccess().getRule();
	}
	
	//TypeRefCS:
	//	TypedRefCS | WildcardTypeRefCS;
	public BaseGrammarAccess.TypeRefCSElements getTypeRefCSAccess() {
		return gaBase.getTypeRefCSAccess();
	}
	
	public ParserRule getTypeRefCSRule() {
		return getTypeRefCSAccess().getRule();
	}
	
	//TypedRefCS:
	//	TypedTypeRefCS;
	public BaseGrammarAccess.TypedRefCSElements getTypedRefCSAccess() {
		return gaBase.getTypedRefCSAccess();
	}
	
	public ParserRule getTypedRefCSRule() {
		return getTypedRefCSAccess().getRule();
	}
	
	//TypedTypeRefCS:
	//	ownedPathName=PathNameCS ('(' ownedBinding=TemplateBindingCS ')')?;
	public BaseGrammarAccess.TypedTypeRefCSElements getTypedTypeRefCSAccess() {
		return gaBase.getTypedTypeRefCSAccess();
	}
	
	public ParserRule getTypedTypeRefCSRule() {
		return getTypedTypeRefCSAccess().getRule();
	}
	
	//WildcardTypeRefCS:
	//	{WildcardTypeRefCS} '?' ('extends' ownedExtends=TypedRefCS)?;
	public BaseGrammarAccess.WildcardTypeRefCSElements getWildcardTypeRefCSAccess() {
		return gaBase.getWildcardTypeRefCSAccess();
	}
	
	public ParserRule getWildcardTypeRefCSRule() {
		return getWildcardTypeRefCSAccess().getRule();
	}
	
	//ID:
	//	SIMPLE_ID | ESCAPED_ID;
	public BaseGrammarAccess.IDElements getIDAccess() {
		return gaBase.getIDAccess();
	}
	
	public ParserRule getIDRule() {
		return getIDAccess().getRule();
	}
	
	//Identifier:
	//	ID;
	public BaseGrammarAccess.IdentifierElements getIdentifierAccess() {
		return gaBase.getIdentifierAccess();
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}
	
	///* A lowerbounded integer is used to define the lowerbound of a collection multiplicity. The value may not be the unlimited value. */
	//LOWER ecore::EInt:
	//	INT;
	public BaseGrammarAccess.LOWERElements getLOWERAccess() {
		return gaBase.getLOWERAccess();
	}
	
	public ParserRule getLOWERRule() {
		return getLOWERAccess().getRule();
	}
	
	///* A number may be an integer or floating point value. The declaration here appears to be that for just an integer. This is to avoid
	// * lookahead conflicts in simple lexers between a dot within a floating point number and the dot-dot in a CollectionLiteralPartCS. A
	// * practical implementation should give high priority to a successful parse of INT ('.' INT)? (('e' | 'E') ('+' | '-')? INT)? than
	// * to the unsuccessful partial parse of INT '..'. The type of the INT terminal is String to allow the floating point syntax to be used.
	// */
	//NUMBER_LITERAL BigNumber:
	//	INT;
	public BaseGrammarAccess.NUMBER_LITERALElements getNUMBER_LITERALAccess() {
		return gaBase.getNUMBER_LITERALAccess();
	}
	
	public ParserRule getNUMBER_LITERALRule() {
		return getNUMBER_LITERALAccess().getRule();
	}
	
	//// EssentialOCLTokenSource pieces this together ('.' INT)? (('e' | 'E') ('+' | '-')? INT)?;
	// StringLiteral:
	//	SINGLE_QUOTED_STRING;
	public BaseGrammarAccess.StringLiteralElements getStringLiteralAccess() {
		return gaBase.getStringLiteralAccess();
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}
	
	///* An upperbounded integer is used to define the upperbound of a collection multiplicity. The value may be the unlimited value. */
	//UPPER ecore::EInt:
	//	INT | '*';
	public BaseGrammarAccess.UPPERElements getUPPERAccess() {
		return gaBase.getUPPERAccess();
	}
	
	public ParserRule getUPPERRule() {
		return getUPPERAccess().getRule();
	}
	
	//URI:
	//	SINGLE_QUOTED_STRING;
	public BaseGrammarAccess.URIElements getURIAccess() {
		return gaBase.getURIAccess();
	}
	
	public ParserRule getURIRule() {
		return getURIAccess().getRule();
	}
	
	//terminal fragment ESCAPED_CHARACTER:
	//	'\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\');
	public TerminalRule getESCAPED_CHARACTERRule() {
		return gaBase.getESCAPED_CHARACTERRule();
	}
	
	//terminal fragment LETTER_CHARACTER:
	//	'a'..'z' | 'A'..'Z' | '_';
	public TerminalRule getLETTER_CHARACTERRule() {
		return gaBase.getLETTER_CHARACTERRule();
	}
	
	//terminal DOUBLE_QUOTED_STRING:
	//	'"' (ESCAPED_CHARACTER | !('\\' | '"'))* '"';
	public TerminalRule getDOUBLE_QUOTED_STRINGRule() {
		return gaBase.getDOUBLE_QUOTED_STRINGRule();
	}
	
	//terminal SINGLE_QUOTED_STRING:
	//	"'" (ESCAPED_CHARACTER | !('\\' | "'"))* "'";
	public TerminalRule getSINGLE_QUOTED_STRINGRule() {
		return gaBase.getSINGLE_QUOTED_STRINGRule();
	}
	
	//terminal ML_SINGLE_QUOTED_STRING:
	//	"/'"->"'/";
	public TerminalRule getML_SINGLE_QUOTED_STRINGRule() {
		return gaBase.getML_SINGLE_QUOTED_STRINGRule();
	}
	
	//terminal SIMPLE_ID:
	//	LETTER_CHARACTER (LETTER_CHARACTER | '0'..'9')*;
	public TerminalRule getSIMPLE_IDRule() {
		return gaBase.getSIMPLE_IDRule();
	}
	
	//terminal ESCAPED_ID:
	//	"_" SINGLE_QUOTED_STRING;
	public TerminalRule getESCAPED_IDRule() {
		return gaBase.getESCAPED_IDRule();
	}
	
	//terminal INT:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaBase.getINTRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaBase.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'--' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaBase.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaBase.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaBase.getANY_OTHERRule();
	}
}
