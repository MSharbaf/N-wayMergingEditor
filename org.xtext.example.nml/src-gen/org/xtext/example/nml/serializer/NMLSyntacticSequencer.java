/*
 * generated by Xtext 2.14.0
 */
package org.xtext.example.nml.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.nml.services.NMLGrammarAccess;

@SuppressWarnings("all")
public class NMLSyntacticSequencer extends AbstractSyntacticSequencer {

	protected NMLGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ConditionCS___EqualsSignKeyword_1_2_or_EqualsSignLessThanSignKeyword_1_6_or_ExclamationMarkKeyword_1_4_or_GreaterThanSignEqualsSignKeyword_1_5_or_GreaterThanSignKeyword_1_0_or_LessThanSignGreaterThanSignKeyword_1_3_or_LessThanSignKeyword_1_1__q;
	protected AbstractElementAlias match_MultiplicityCS_VerticalLineQuestionMarkKeyword_2_0_q;
	protected AbstractElementAlias match_OctopusCP___ExtendsKeyword_8_0_UnrestrictedNameParserRuleCall_8_1___CommaKeyword_8_2_0_UnrestrictedNameParserRuleCall_8_2_1__a__q;
	protected AbstractElementAlias match_OursCP___Exists_inKeyword_5_2_0_INTTerminalRuleCall_5_2_1__q;
	protected AbstractElementAlias match_OursCP___ExtendsKeyword_9_0_UnrestrictedNameParserRuleCall_9_1___CommaKeyword_9_2_0_UnrestrictedNameParserRuleCall_9_2_1__a__q;
	protected AbstractElementAlias match_StatementCS_NewKeyword_5_0_1_or_PlusSignKeyword_5_0_0;
	protected AbstractElementAlias match_StatementCS_VarKeyword_0_q;
	protected AbstractElementAlias match_StatementCS___ColonColonEqualsSignKeyword_2_1_or_EqualsSignKeyword_2_0__q;
	protected AbstractElementAlias match_StatementCS___FullStopKeyword_4_0_EquivalentKeyword_4_1_LeftParenthesisKeyword_4_2_RightParenthesisKeyword_4_3__q;
	protected AbstractElementAlias match_TopLevelCP_UnrestrictedNameParserRuleCall_4_1_q;
	protected AbstractElementAlias match_TopLevelCP_UnrestrictedNameParserRuleCall_8_1_q;
	protected AbstractElementAlias match_TopLevelCP___PostKeyword_8_0_UnrestrictedNameParserRuleCall_8_1_q_LeftCurlyBracketKeyword_8_2_RightCurlyBracketKeyword_8_4__q;
	protected AbstractElementAlias match_TopLevelCP___PreKeyword_4_0_UnrestrictedNameParserRuleCall_4_1_q_LeftCurlyBracketKeyword_4_2_RightCurlyBracketKeyword_4_4__q;
	protected AbstractElementAlias match_TransferCP___AndKeyword_8_1_0_1_or_OrKeyword_8_1_0_0__q;
	protected AbstractElementAlias match_TransferCP___ExtendsKeyword_6_0_UnrestrictedNameParserRuleCall_6_1___CommaKeyword_6_2_0_UnrestrictedNameParserRuleCall_6_2_1__a__q;
	protected AbstractElementAlias match_TupleTypeCS___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q;
	protected AbstractElementAlias match_modelListCS___CommaKeyword_4_0_UnrestrictedNameParserRuleCall_4_1__a;
	protected AbstractElementAlias match_modelOrderCS___CommaKeyword_4_0_UnrestrictedNameParserRuleCall_4_1__a;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (NMLGrammarAccess) access;
		match_ConditionCS___EqualsSignKeyword_1_2_or_EqualsSignLessThanSignKeyword_1_6_or_ExclamationMarkKeyword_1_4_or_GreaterThanSignEqualsSignKeyword_1_5_or_GreaterThanSignKeyword_1_0_or_LessThanSignGreaterThanSignKeyword_1_3_or_LessThanSignKeyword_1_1__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getConditionCSAccess().getEqualsSignKeyword_1_2()), new TokenAlias(false, false, grammarAccess.getConditionCSAccess().getEqualsSignLessThanSignKeyword_1_6()), new TokenAlias(false, false, grammarAccess.getConditionCSAccess().getExclamationMarkKeyword_1_4()), new TokenAlias(false, false, grammarAccess.getConditionCSAccess().getGreaterThanSignEqualsSignKeyword_1_5()), new TokenAlias(false, false, grammarAccess.getConditionCSAccess().getGreaterThanSignKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getConditionCSAccess().getLessThanSignGreaterThanSignKeyword_1_3()), new TokenAlias(false, false, grammarAccess.getConditionCSAccess().getLessThanSignKeyword_1_1()));
		match_MultiplicityCS_VerticalLineQuestionMarkKeyword_2_0_q = new TokenAlias(false, true, grammarAccess.getMultiplicityCSAccess().getVerticalLineQuestionMarkKeyword_2_0());
		match_OctopusCP___ExtendsKeyword_8_0_UnrestrictedNameParserRuleCall_8_1___CommaKeyword_8_2_0_UnrestrictedNameParserRuleCall_8_2_1__a__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getOctopusCPAccess().getExtendsKeyword_8_0()), new TokenAlias(false, false, grammarAccess.getOctopusCPAccess().getUnrestrictedNameParserRuleCall_8_1()), new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getOctopusCPAccess().getCommaKeyword_8_2_0()), new TokenAlias(false, false, grammarAccess.getOctopusCPAccess().getUnrestrictedNameParserRuleCall_8_2_1())));
		match_OursCP___Exists_inKeyword_5_2_0_INTTerminalRuleCall_5_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getOursCPAccess().getExists_inKeyword_5_2_0()), new TokenAlias(false, false, grammarAccess.getOursCPAccess().getINTTerminalRuleCall_5_2_1()));
		match_OursCP___ExtendsKeyword_9_0_UnrestrictedNameParserRuleCall_9_1___CommaKeyword_9_2_0_UnrestrictedNameParserRuleCall_9_2_1__a__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getOursCPAccess().getExtendsKeyword_9_0()), new TokenAlias(false, false, grammarAccess.getOursCPAccess().getUnrestrictedNameParserRuleCall_9_1()), new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getOursCPAccess().getCommaKeyword_9_2_0()), new TokenAlias(false, false, grammarAccess.getOursCPAccess().getUnrestrictedNameParserRuleCall_9_2_1())));
		match_StatementCS_NewKeyword_5_0_1_or_PlusSignKeyword_5_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getStatementCSAccess().getNewKeyword_5_0_1()), new TokenAlias(false, false, grammarAccess.getStatementCSAccess().getPlusSignKeyword_5_0_0()));
		match_StatementCS_VarKeyword_0_q = new TokenAlias(false, true, grammarAccess.getStatementCSAccess().getVarKeyword_0());
		match_StatementCS___ColonColonEqualsSignKeyword_2_1_or_EqualsSignKeyword_2_0__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getStatementCSAccess().getColonColonEqualsSignKeyword_2_1()), new TokenAlias(false, false, grammarAccess.getStatementCSAccess().getEqualsSignKeyword_2_0()));
		match_StatementCS___FullStopKeyword_4_0_EquivalentKeyword_4_1_LeftParenthesisKeyword_4_2_RightParenthesisKeyword_4_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getStatementCSAccess().getFullStopKeyword_4_0()), new TokenAlias(false, false, grammarAccess.getStatementCSAccess().getEquivalentKeyword_4_1()), new TokenAlias(false, false, grammarAccess.getStatementCSAccess().getLeftParenthesisKeyword_4_2()), new TokenAlias(false, false, grammarAccess.getStatementCSAccess().getRightParenthesisKeyword_4_3()));
		match_TopLevelCP_UnrestrictedNameParserRuleCall_4_1_q = new TokenAlias(false, true, grammarAccess.getTopLevelCPAccess().getUnrestrictedNameParserRuleCall_4_1());
		match_TopLevelCP_UnrestrictedNameParserRuleCall_8_1_q = new TokenAlias(false, true, grammarAccess.getTopLevelCPAccess().getUnrestrictedNameParserRuleCall_8_1());
		match_TopLevelCP___PostKeyword_8_0_UnrestrictedNameParserRuleCall_8_1_q_LeftCurlyBracketKeyword_8_2_RightCurlyBracketKeyword_8_4__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getTopLevelCPAccess().getPostKeyword_8_0()), new TokenAlias(false, true, grammarAccess.getTopLevelCPAccess().getUnrestrictedNameParserRuleCall_8_1()), new TokenAlias(false, false, grammarAccess.getTopLevelCPAccess().getLeftCurlyBracketKeyword_8_2()), new TokenAlias(false, false, grammarAccess.getTopLevelCPAccess().getRightCurlyBracketKeyword_8_4()));
		match_TopLevelCP___PreKeyword_4_0_UnrestrictedNameParserRuleCall_4_1_q_LeftCurlyBracketKeyword_4_2_RightCurlyBracketKeyword_4_4__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getTopLevelCPAccess().getPreKeyword_4_0()), new TokenAlias(false, true, grammarAccess.getTopLevelCPAccess().getUnrestrictedNameParserRuleCall_4_1()), new TokenAlias(false, false, grammarAccess.getTopLevelCPAccess().getLeftCurlyBracketKeyword_4_2()), new TokenAlias(false, false, grammarAccess.getTopLevelCPAccess().getRightCurlyBracketKeyword_4_4()));
		match_TransferCP___AndKeyword_8_1_0_1_or_OrKeyword_8_1_0_0__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getTransferCPAccess().getAndKeyword_8_1_0_1()), new TokenAlias(false, false, grammarAccess.getTransferCPAccess().getOrKeyword_8_1_0_0()));
		match_TransferCP___ExtendsKeyword_6_0_UnrestrictedNameParserRuleCall_6_1___CommaKeyword_6_2_0_UnrestrictedNameParserRuleCall_6_2_1__a__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getTransferCPAccess().getExtendsKeyword_6_0()), new TokenAlias(false, false, grammarAccess.getTransferCPAccess().getUnrestrictedNameParserRuleCall_6_1()), new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getTransferCPAccess().getCommaKeyword_6_2_0()), new TokenAlias(false, false, grammarAccess.getTransferCPAccess().getUnrestrictedNameParserRuleCall_6_2_1())));
		match_TupleTypeCS___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getTupleTypeCSAccess().getLeftParenthesisKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getTupleTypeCSAccess().getRightParenthesisKeyword_1_2()));
		match_modelListCS___CommaKeyword_4_0_UnrestrictedNameParserRuleCall_4_1__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getModelListCSAccess().getCommaKeyword_4_0()), new TokenAlias(false, false, grammarAccess.getModelListCSAccess().getUnrestrictedNameParserRuleCall_4_1()));
		match_modelOrderCS___CommaKeyword_4_0_UnrestrictedNameParserRuleCall_4_1__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getModelOrderCSAccess().getCommaKeyword_4_0()), new TokenAlias(false, false, grammarAccess.getModelOrderCSAccess().getUnrestrictedNameParserRuleCall_4_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getINTRule())
			return getINTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getUnrestrictedNameRule())
			return getUnrestrictedNameToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal INT: 	('0'..'9')+;
	 */
	protected String getINTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * UnrestrictedName returns ecore::EString: 	EssentialOCLUnrestrictedName;
	 */
	protected String getUnrestrictedNameToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ConditionCS___EqualsSignKeyword_1_2_or_EqualsSignLessThanSignKeyword_1_6_or_ExclamationMarkKeyword_1_4_or_GreaterThanSignEqualsSignKeyword_1_5_or_GreaterThanSignKeyword_1_0_or_LessThanSignGreaterThanSignKeyword_1_3_or_LessThanSignKeyword_1_1__q.equals(syntax))
				emit_ConditionCS___EqualsSignKeyword_1_2_or_EqualsSignLessThanSignKeyword_1_6_or_ExclamationMarkKeyword_1_4_or_GreaterThanSignEqualsSignKeyword_1_5_or_GreaterThanSignKeyword_1_0_or_LessThanSignGreaterThanSignKeyword_1_3_or_LessThanSignKeyword_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_MultiplicityCS_VerticalLineQuestionMarkKeyword_2_0_q.equals(syntax))
				emit_MultiplicityCS_VerticalLineQuestionMarkKeyword_2_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OctopusCP___ExtendsKeyword_8_0_UnrestrictedNameParserRuleCall_8_1___CommaKeyword_8_2_0_UnrestrictedNameParserRuleCall_8_2_1__a__q.equals(syntax))
				emit_OctopusCP___ExtendsKeyword_8_0_UnrestrictedNameParserRuleCall_8_1___CommaKeyword_8_2_0_UnrestrictedNameParserRuleCall_8_2_1__a__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OursCP___Exists_inKeyword_5_2_0_INTTerminalRuleCall_5_2_1__q.equals(syntax))
				emit_OursCP___Exists_inKeyword_5_2_0_INTTerminalRuleCall_5_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OursCP___ExtendsKeyword_9_0_UnrestrictedNameParserRuleCall_9_1___CommaKeyword_9_2_0_UnrestrictedNameParserRuleCall_9_2_1__a__q.equals(syntax))
				emit_OursCP___ExtendsKeyword_9_0_UnrestrictedNameParserRuleCall_9_1___CommaKeyword_9_2_0_UnrestrictedNameParserRuleCall_9_2_1__a__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_StatementCS_NewKeyword_5_0_1_or_PlusSignKeyword_5_0_0.equals(syntax))
				emit_StatementCS_NewKeyword_5_0_1_or_PlusSignKeyword_5_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_StatementCS_VarKeyword_0_q.equals(syntax))
				emit_StatementCS_VarKeyword_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_StatementCS___ColonColonEqualsSignKeyword_2_1_or_EqualsSignKeyword_2_0__q.equals(syntax))
				emit_StatementCS___ColonColonEqualsSignKeyword_2_1_or_EqualsSignKeyword_2_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_StatementCS___FullStopKeyword_4_0_EquivalentKeyword_4_1_LeftParenthesisKeyword_4_2_RightParenthesisKeyword_4_3__q.equals(syntax))
				emit_StatementCS___FullStopKeyword_4_0_EquivalentKeyword_4_1_LeftParenthesisKeyword_4_2_RightParenthesisKeyword_4_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TopLevelCP_UnrestrictedNameParserRuleCall_4_1_q.equals(syntax))
				emit_TopLevelCP_UnrestrictedNameParserRuleCall_4_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TopLevelCP_UnrestrictedNameParserRuleCall_8_1_q.equals(syntax))
				emit_TopLevelCP_UnrestrictedNameParserRuleCall_8_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TopLevelCP___PostKeyword_8_0_UnrestrictedNameParserRuleCall_8_1_q_LeftCurlyBracketKeyword_8_2_RightCurlyBracketKeyword_8_4__q.equals(syntax))
				emit_TopLevelCP___PostKeyword_8_0_UnrestrictedNameParserRuleCall_8_1_q_LeftCurlyBracketKeyword_8_2_RightCurlyBracketKeyword_8_4__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TopLevelCP___PreKeyword_4_0_UnrestrictedNameParserRuleCall_4_1_q_LeftCurlyBracketKeyword_4_2_RightCurlyBracketKeyword_4_4__q.equals(syntax))
				emit_TopLevelCP___PreKeyword_4_0_UnrestrictedNameParserRuleCall_4_1_q_LeftCurlyBracketKeyword_4_2_RightCurlyBracketKeyword_4_4__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TransferCP___AndKeyword_8_1_0_1_or_OrKeyword_8_1_0_0__q.equals(syntax))
				emit_TransferCP___AndKeyword_8_1_0_1_or_OrKeyword_8_1_0_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TransferCP___ExtendsKeyword_6_0_UnrestrictedNameParserRuleCall_6_1___CommaKeyword_6_2_0_UnrestrictedNameParserRuleCall_6_2_1__a__q.equals(syntax))
				emit_TransferCP___ExtendsKeyword_6_0_UnrestrictedNameParserRuleCall_6_1___CommaKeyword_6_2_0_UnrestrictedNameParserRuleCall_6_2_1__a__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TupleTypeCS___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q.equals(syntax))
				emit_TupleTypeCS___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_modelListCS___CommaKeyword_4_0_UnrestrictedNameParserRuleCall_4_1__a.equals(syntax))
				emit_modelListCS___CommaKeyword_4_0_UnrestrictedNameParserRuleCall_4_1__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_modelOrderCS___CommaKeyword_4_0_UnrestrictedNameParserRuleCall_4_1__a.equals(syntax))
				emit_modelOrderCS___CommaKeyword_4_0_UnrestrictedNameParserRuleCall_4_1__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     (
	  *         '>' | 
	  *         '<' | 
	  *         '=' | 
	  *         '<>' | 
	  *         '!' | 
	  *         '>=' | 
	  *         '=<'
	  *     )?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) ownedElement+=FQN
	 *     ownedElement+=FQN (ambiguity) ownedElement+=FQN
	 */
	protected void emit_ConditionCS___EqualsSignKeyword_1_2_or_EqualsSignLessThanSignKeyword_1_6_or_ExclamationMarkKeyword_1_4_or_GreaterThanSignEqualsSignKeyword_1_5_or_GreaterThanSignKeyword_1_0_or_LessThanSignGreaterThanSignKeyword_1_3_or_LessThanSignKeyword_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '|?'?
	 *
	 * This ambiguous syntax occurs at:
	 *     lowerBound=LOWER (ambiguity) ']' (rule end)
	 *     stringBounds='*' (ambiguity) ']' (rule end)
	 *     stringBounds='+' (ambiguity) ']' (rule end)
	 *     stringBounds='?' (ambiguity) ']' (rule end)
	 *     upperBound=UPPER (ambiguity) ']' (rule end)
	 */
	protected void emit_MultiplicityCS_VerticalLineQuestionMarkKeyword_2_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('extends' UnrestrictedName (',' UnrestrictedName)*)?
	 *
	 * This ambiguous syntax occurs at:
	 *     ownedModels+=modelTypeCS (ambiguity) '{' ownedConditions+=StatementCS
	 */
	protected void emit_OctopusCP___ExtendsKeyword_8_0_UnrestrictedNameParserRuleCall_8_1___CommaKeyword_8_2_0_UnrestrictedNameParserRuleCall_8_2_1__a__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('exists_in' INT)?
	 *
	 * This ambiguous syntax occurs at:
	 *     ownedModels+=modelTypeCS (ambiguity) 'into' ownedModels+=modelTypeCS
	 *     ownedModels+=modelTypeCS (ambiguity) 'priority' ownedOrders+=modelOrderCS
	 */
	protected void emit_OursCP___Exists_inKeyword_5_2_0_INTTerminalRuleCall_5_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('extends' UnrestrictedName (',' UnrestrictedName)*)?
	 *
	 * This ambiguous syntax occurs at:
	 *     ownedModels+=modelTypeCS (ambiguity) '{' ownedStatement+=StatementCS
	 */
	protected void emit_OursCP___ExtendsKeyword_9_0_UnrestrictedNameParserRuleCall_9_1___CommaKeyword_9_2_0_UnrestrictedNameParserRuleCall_9_2_1__a__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '+' | 'new'
	 *
	 * This ambiguous syntax occurs at:
	 *     ownedElement+=FQN ('.' 'equivalent' '(' ')')? (ambiguity) ownedElement+=FQN
	 *     ownedElement+=FQN (ambiguity) ownedElement+=FQN
	 */
	protected void emit_StatementCS_NewKeyword_5_0_1_or_PlusSignKeyword_5_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'var'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) ('=' | '::=')? ownedElement+=FQN
	 *     (rule start) (ambiguity) ownedElement+=FQN
	 */
	protected void emit_StatementCS_VarKeyword_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('=' | '::=')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'var'? (ambiguity) ownedElement+=FQN
	 *     ownedElement+=FQN (ambiguity) ownedElement+=FQN
	 */
	protected void emit_StatementCS___ColonColonEqualsSignKeyword_2_1_or_EqualsSignKeyword_2_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('.' 'equivalent' '(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     ownedElement+=FQN (ambiguity) ';' (rule end)
	 *     ownedElement+=FQN (ambiguity) ('+' | 'new') ownedElement+=FQN
	 */
	protected void emit_StatementCS___FullStopKeyword_4_0_EquivalentKeyword_4_1_LeftParenthesisKeyword_4_2_RightParenthesisKeyword_4_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     UnrestrictedName?
	 *
	 * This ambiguous syntax occurs at:
	 *     ownedDomains+=DomainCP 'pre' (ambiguity) '{' ownedPre+=StatementCS
	 */
	protected void emit_TopLevelCP_UnrestrictedNameParserRuleCall_4_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     UnrestrictedName?
	 *
	 * This ambiguous syntax occurs at:
	 *     ownedDomains+=DomainCP ('pre' UnrestrictedName? '{' '}')? 'post' (ambiguity) '{' ownedPre+=StatementCS
	 *     ownedOctopus+=OctopusCP 'post' (ambiguity) '{' ownedPre+=StatementCS
	 *     ownedOurs+=OursCP 'post' (ambiguity) '{' ownedPre+=StatementCS
	 *     ownedPre+=StatementCS '}' 'post' (ambiguity) '{' ownedPre+=StatementCS
	 *     ownedTransformation+=TransferCP 'post' (ambiguity) '{' ownedPre+=StatementCS
	 */
	protected void emit_TopLevelCP_UnrestrictedNameParserRuleCall_8_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('post' UnrestrictedName? '{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     ownedDomains+=DomainCP ('pre' UnrestrictedName? '{' '}')? (ambiguity) '}' (rule end)
	 *     ownedOctopus+=OctopusCP (ambiguity) '}' (rule end)
	 *     ownedOurs+=OursCP (ambiguity) '}' (rule end)
	 *     ownedPre+=StatementCS '}' (ambiguity) '}' (rule end)
	 *     ownedTransformation+=TransferCP (ambiguity) '}' (rule end)
	 */
	protected void emit_TopLevelCP___PostKeyword_8_0_UnrestrictedNameParserRuleCall_8_1_q_LeftCurlyBracketKeyword_8_2_RightCurlyBracketKeyword_8_4__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('pre' UnrestrictedName? '{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     ownedDomains+=DomainCP (ambiguity) 'post' UnrestrictedName? '{' ownedPre+=StatementCS
	 *     ownedDomains+=DomainCP (ambiguity) 'rule' UnrestrictedName ownedOctopus+=OctopusCP
	 *     ownedDomains+=DomainCP (ambiguity) 'rule' UnrestrictedName ownedOurs+=OursCP
	 *     ownedDomains+=DomainCP (ambiguity) 'rule' UnrestrictedName ownedTransformation+=TransferCP
	 *     ownedDomains+=DomainCP (ambiguity) ('post' UnrestrictedName? '{' '}')? '}' (rule end)
	 */
	protected void emit_TopLevelCP___PreKeyword_4_0_UnrestrictedNameParserRuleCall_4_1_q_LeftCurlyBracketKeyword_4_2_RightCurlyBracketKeyword_4_4__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('or' | 'and')?
	 *
	 * This ambiguous syntax occurs at:
	 *     ownedConditions+=ConditionCS (ambiguity) ownedConditions+=ConditionCS
	 *     ownedModels+=modelTypeCS ('extends' UnrestrictedName (',' UnrestrictedName)*)? '{' 'guard' (ambiguity) ownedConditions+=ConditionCS
	 */
	protected void emit_TransferCP___AndKeyword_8_1_0_1_or_OrKeyword_8_1_0_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('extends' UnrestrictedName (',' UnrestrictedName)*)?
	 *
	 * This ambiguous syntax occurs at:
	 *     ownedModels+=modelTypeCS (ambiguity) '{' 'guard' ('or' | 'and')? ownedConditions+=ConditionCS
	 *     ownedModels+=modelTypeCS (ambiguity) '{' ownedStatement+=StatementCS
	 */
	protected void emit_TransferCP___ExtendsKeyword_6_0_UnrestrictedNameParserRuleCall_6_1___CommaKeyword_6_2_0_UnrestrictedNameParserRuleCall_6_2_1__a__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name='Tuple' (ambiguity) (rule end)
	 *     name='Tuple' (ambiguity) ownedMultiplicity=MultiplicityCS
	 */
	protected void emit_TupleTypeCS___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (',' UnrestrictedName)*
	 *
	 * This ambiguous syntax occurs at:
	 *     name=Identifier ':' '(' UnrestrictedName (ambiguity) ')' (rule end)
	 */
	protected void emit_modelListCS___CommaKeyword_4_0_UnrestrictedNameParserRuleCall_4_1__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (',' UnrestrictedName)*
	 *
	 * This ambiguous syntax occurs at:
	 *     name=Identifier ':' '[' UnrestrictedName (ambiguity) ']' (rule end)
	 */
	protected void emit_modelOrderCS___CommaKeyword_4_0_UnrestrictedNameParserRuleCall_4_1__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
