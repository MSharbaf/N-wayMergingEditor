/**
 * generated by Xtext 2.14.0
 */
package org.xtext.example.nml.nML.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.xtext.example.nml.nML.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.xtext.example.nml.nML.NMLPackage
 * @generated
 */
public class NMLSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static NMLPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NMLSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = NMLPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case NMLPackage.TOP_LEVEL_CP:
      {
        TopLevelCP topLevelCP = (TopLevelCP)theEObject;
        T result = caseTopLevelCP(topLevelCP);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NMLPackage.DOMAIN_CP:
      {
        DomainCP domainCP = (DomainCP)theEObject;
        T result = caseDomainCP(domainCP);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NMLPackage.OCTOPUS_CP:
      {
        OctopusCP octopusCP = (OctopusCP)theEObject;
        T result = caseOctopusCP(octopusCP);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NMLPackage.OURS_CP:
      {
        OursCP oursCP = (OursCP)theEObject;
        T result = caseOursCP(oursCP);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NMLPackage.TRANSFORMATION_CP:
      {
        TransformationCP transformationCP = (TransformationCP)theEObject;
        T result = caseTransformationCP(transformationCP);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NMLPackage.MODEL_TYPE_CS:
      {
        modelTypeCS modelTypeCS = (modelTypeCS)theEObject;
        T result = casemodelTypeCS(modelTypeCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NMLPackage.MODEL_ORDER_CS:
      {
        modelOrderCS modelOrderCS = (modelOrderCS)theEObject;
        T result = casemodelOrderCS(modelOrderCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NMLPackage.STATEMENT_CS:
      {
        StatementCS statementCS = (StatementCS)theEObject;
        T result = caseStatementCS(statementCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NMLPackage.CONDITION_CS:
      {
        ConditionCS conditionCS = (ConditionCS)theEObject;
        T result = caseConditionCS(conditionCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Top Level CP</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Top Level CP</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTopLevelCP(TopLevelCP object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Domain CP</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Domain CP</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDomainCP(DomainCP object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Octopus CP</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Octopus CP</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOctopusCP(OctopusCP object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ours CP</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ours CP</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOursCP(OursCP object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Transformation CP</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Transformation CP</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTransformationCP(TransformationCP object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>model Type CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>model Type CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casemodelTypeCS(modelTypeCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>model Order CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>model Order CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casemodelOrderCS(modelOrderCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatementCS(StatementCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Condition CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Condition CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConditionCS(ConditionCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //NMLSwitch
