/**
 * generated by Xtext 2.14.0
 */
package org.xtext.example.nml.nML.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.nml.nML.DomainCP;
import org.xtext.example.nml.nML.NMLPackage;
import org.xtext.example.nml.nML.OctopusCP;
import org.xtext.example.nml.nML.OursCP;
import org.xtext.example.nml.nML.StatementCS;
import org.xtext.example.nml.nML.TopLevelCP;
import org.xtext.example.nml.nML.TransformationCP;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Top Level CP</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.nml.nML.impl.TopLevelCPImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.example.nml.nML.impl.TopLevelCPImpl#getOwnedDomains <em>Owned Domains</em>}</li>
 *   <li>{@link org.xtext.example.nml.nML.impl.TopLevelCPImpl#getOwnedPre <em>Owned Pre</em>}</li>
 *   <li>{@link org.xtext.example.nml.nML.impl.TopLevelCPImpl#getOwnedOctopus <em>Owned Octopus</em>}</li>
 *   <li>{@link org.xtext.example.nml.nML.impl.TopLevelCPImpl#getOwnedOurs <em>Owned Ours</em>}</li>
 *   <li>{@link org.xtext.example.nml.nML.impl.TopLevelCPImpl#getOwnedTransformation <em>Owned Transformation</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TopLevelCPImpl extends MinimalEObjectImpl.Container implements TopLevelCP
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getOwnedDomains() <em>Owned Domains</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOwnedDomains()
   * @generated
   * @ordered
   */
  protected EList<DomainCP> ownedDomains;

  /**
   * The cached value of the '{@link #getOwnedPre() <em>Owned Pre</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOwnedPre()
   * @generated
   * @ordered
   */
  protected EList<StatementCS> ownedPre;

  /**
   * The cached value of the '{@link #getOwnedOctopus() <em>Owned Octopus</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOwnedOctopus()
   * @generated
   * @ordered
   */
  protected EList<OctopusCP> ownedOctopus;

  /**
   * The cached value of the '{@link #getOwnedOurs() <em>Owned Ours</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOwnedOurs()
   * @generated
   * @ordered
   */
  protected EList<OursCP> ownedOurs;

  /**
   * The cached value of the '{@link #getOwnedTransformation() <em>Owned Transformation</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOwnedTransformation()
   * @generated
   * @ordered
   */
  protected EList<TransformationCP> ownedTransformation;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TopLevelCPImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return NMLPackage.Literals.TOP_LEVEL_CP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NMLPackage.TOP_LEVEL_CP__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<DomainCP> getOwnedDomains()
  {
    if (ownedDomains == null)
    {
      ownedDomains = new EObjectContainmentEList<DomainCP>(DomainCP.class, this, NMLPackage.TOP_LEVEL_CP__OWNED_DOMAINS);
    }
    return ownedDomains;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<StatementCS> getOwnedPre()
  {
    if (ownedPre == null)
    {
      ownedPre = new EObjectContainmentEList<StatementCS>(StatementCS.class, this, NMLPackage.TOP_LEVEL_CP__OWNED_PRE);
    }
    return ownedPre;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<OctopusCP> getOwnedOctopus()
  {
    if (ownedOctopus == null)
    {
      ownedOctopus = new EObjectContainmentEList<OctopusCP>(OctopusCP.class, this, NMLPackage.TOP_LEVEL_CP__OWNED_OCTOPUS);
    }
    return ownedOctopus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<OursCP> getOwnedOurs()
  {
    if (ownedOurs == null)
    {
      ownedOurs = new EObjectContainmentEList<OursCP>(OursCP.class, this, NMLPackage.TOP_LEVEL_CP__OWNED_OURS);
    }
    return ownedOurs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<TransformationCP> getOwnedTransformation()
  {
    if (ownedTransformation == null)
    {
      ownedTransformation = new EObjectContainmentEList<TransformationCP>(TransformationCP.class, this, NMLPackage.TOP_LEVEL_CP__OWNED_TRANSFORMATION);
    }
    return ownedTransformation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case NMLPackage.TOP_LEVEL_CP__OWNED_DOMAINS:
        return ((InternalEList<?>)getOwnedDomains()).basicRemove(otherEnd, msgs);
      case NMLPackage.TOP_LEVEL_CP__OWNED_PRE:
        return ((InternalEList<?>)getOwnedPre()).basicRemove(otherEnd, msgs);
      case NMLPackage.TOP_LEVEL_CP__OWNED_OCTOPUS:
        return ((InternalEList<?>)getOwnedOctopus()).basicRemove(otherEnd, msgs);
      case NMLPackage.TOP_LEVEL_CP__OWNED_OURS:
        return ((InternalEList<?>)getOwnedOurs()).basicRemove(otherEnd, msgs);
      case NMLPackage.TOP_LEVEL_CP__OWNED_TRANSFORMATION:
        return ((InternalEList<?>)getOwnedTransformation()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case NMLPackage.TOP_LEVEL_CP__NAME:
        return getName();
      case NMLPackage.TOP_LEVEL_CP__OWNED_DOMAINS:
        return getOwnedDomains();
      case NMLPackage.TOP_LEVEL_CP__OWNED_PRE:
        return getOwnedPre();
      case NMLPackage.TOP_LEVEL_CP__OWNED_OCTOPUS:
        return getOwnedOctopus();
      case NMLPackage.TOP_LEVEL_CP__OWNED_OURS:
        return getOwnedOurs();
      case NMLPackage.TOP_LEVEL_CP__OWNED_TRANSFORMATION:
        return getOwnedTransformation();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case NMLPackage.TOP_LEVEL_CP__NAME:
        setName((String)newValue);
        return;
      case NMLPackage.TOP_LEVEL_CP__OWNED_DOMAINS:
        getOwnedDomains().clear();
        getOwnedDomains().addAll((Collection<? extends DomainCP>)newValue);
        return;
      case NMLPackage.TOP_LEVEL_CP__OWNED_PRE:
        getOwnedPre().clear();
        getOwnedPre().addAll((Collection<? extends StatementCS>)newValue);
        return;
      case NMLPackage.TOP_LEVEL_CP__OWNED_OCTOPUS:
        getOwnedOctopus().clear();
        getOwnedOctopus().addAll((Collection<? extends OctopusCP>)newValue);
        return;
      case NMLPackage.TOP_LEVEL_CP__OWNED_OURS:
        getOwnedOurs().clear();
        getOwnedOurs().addAll((Collection<? extends OursCP>)newValue);
        return;
      case NMLPackage.TOP_LEVEL_CP__OWNED_TRANSFORMATION:
        getOwnedTransformation().clear();
        getOwnedTransformation().addAll((Collection<? extends TransformationCP>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case NMLPackage.TOP_LEVEL_CP__NAME:
        setName(NAME_EDEFAULT);
        return;
      case NMLPackage.TOP_LEVEL_CP__OWNED_DOMAINS:
        getOwnedDomains().clear();
        return;
      case NMLPackage.TOP_LEVEL_CP__OWNED_PRE:
        getOwnedPre().clear();
        return;
      case NMLPackage.TOP_LEVEL_CP__OWNED_OCTOPUS:
        getOwnedOctopus().clear();
        return;
      case NMLPackage.TOP_LEVEL_CP__OWNED_OURS:
        getOwnedOurs().clear();
        return;
      case NMLPackage.TOP_LEVEL_CP__OWNED_TRANSFORMATION:
        getOwnedTransformation().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case NMLPackage.TOP_LEVEL_CP__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case NMLPackage.TOP_LEVEL_CP__OWNED_DOMAINS:
        return ownedDomains != null && !ownedDomains.isEmpty();
      case NMLPackage.TOP_LEVEL_CP__OWNED_PRE:
        return ownedPre != null && !ownedPre.isEmpty();
      case NMLPackage.TOP_LEVEL_CP__OWNED_OCTOPUS:
        return ownedOctopus != null && !ownedOctopus.isEmpty();
      case NMLPackage.TOP_LEVEL_CP__OWNED_OURS:
        return ownedOurs != null && !ownedOurs.isEmpty();
      case NMLPackage.TOP_LEVEL_CP__OWNED_TRANSFORMATION:
        return ownedTransformation != null && !ownedTransformation.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //TopLevelCPImpl
