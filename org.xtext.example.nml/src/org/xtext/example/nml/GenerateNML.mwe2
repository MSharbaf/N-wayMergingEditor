module org.xtext.example.nml.GenerateNML

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*
import org.eclipse.emf.mwe.utils.*
import org.eclipse.ocl.examples.build.*
import org.eclipse.ocl.examples.build.utilities.*
import org.eclipse.ocl.examples.build.xtend.*
import de.itemis.xtext.antlr.*
import org.antlr.generator.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*
import org.eclipse.emf.ecore.resource.impl.*

var rootPath = ".."

Workflow {
	
	bean = ResourceSetImpl : resourceSet {}
    bean = StandaloneSetup { resourceSet = resourceSet
		scanClassPath = true
		platformUri = ".."

		registerGenModelFile = "platform:/resource/org.xtext.example.nml/model/generated/NML.genmodel"
	}
    bean = org.xtext.example.nml.OCLDelegateSetup {resourceSet = resourceSet}
    
	component = XtextGenerator {
		configuration = {
			project = StandardProjectConfig {
				baseName = "org.xtext.example.nml"
				rootPath = rootPath
				runtimeTest = {
					enabled = true
				}
				eclipsePlugin = {
					enabled = true
				}
				eclipsePluginTest = {
					enabled = true
				}
				createEclipseMetaData = true
			}
			code = {
				encoding = "windows-1252"
				lineDelimiter = "\r\n"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
			}
		}
		language = StandardLanguage {
			name = "org.xtext.example.nml.NML"
			fileExtensions = "nml"
			
			referencedResource = "platform:/resource/org.eclipse.ocl.xtext.base/model/BaseCS.genmodel"
			referencedResource = "platform:/resource/org.eclipse.ocl.pivot/model/Pivot.genmodel"
			referencedResource = "platform:/resource/org.eclipse.ocl.xtext.essentialocl/model/EssentialOCLCS.genmodel"

			fragment = grammarAccess.GrammarAccessFragment2 {}
			
	 		parserGenerator = {
			 	options = { backtrack = true classSplitting = true }
  				antlrParam = "-Xconversiontimeout" antlrParam = "10000"
			}
			

			serializer = {
				generateStub = false
			}
			validator = {
				// composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}
			
						scopeProvider = {
				generateStub = true 
			}
			
			// outline API 
			outline = {
				generateStub = true
			}

			contentAssist ={
			}
			
			// formatter API 
			formatter = {
				generateStub = true
			}
			
			// labeling API 
			labelProvider = {
				generateStub = false 
			}
			
			ideaParser = {
				options = { backtrack = true classSplitting = true}			
				antlrParam = "-Xconversiontimeout" antlrParam = "10000"
			}

			fragment = builder.BuilderIntegrationFragment2 {}
			
		}
	}
}
